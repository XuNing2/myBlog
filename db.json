{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/maupassant/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/maupassant/source/css/copycode.scss","path":"css/copycode.scss","modified":1,"renderable":1},{"_id":"themes/maupassant/source/css/copyright.scss","path":"css/copyright.scss","modified":1,"renderable":1},{"_id":"themes/maupassant/source/css/donate.scss","path":"css/donate.scss","modified":1,"renderable":1},{"_id":"themes/maupassant/source/css/search.scss","path":"css/search.scss","modified":1,"renderable":1},{"_id":"themes/maupassant/source/img/alipay.svg","path":"img/alipay.svg","modified":1,"renderable":1},{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":1,"renderable":1},{"_id":"themes/maupassant/source/img/bitcoin.svg","path":"img/bitcoin.svg","modified":1,"renderable":1},{"_id":"themes/maupassant/source/img/github.svg","path":"img/github.svg","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/copycode.js","path":"js/copycode.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/img/like.svg","path":"img/like.svg","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/copyright.js","path":"js/copyright.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/img/paypal.svg","path":"img/paypal.svg","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/donate.js","path":"js/donate.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.js","path":"js/fancybox.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/img/wechat.svg","path":"img/wechat.svg","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/love.js","path":"js/love.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/fastgithub 使用心得.md","hash":"ba4e5603caee01de8ca29c4a582a5d7c42017591","modified":1658319834750},{"_id":"source/_posts/hexo插入图片.md","hash":"dfc314499a8bd6e74fc25b6beeb5965593417e1d","modified":1649490124552},{"_id":"source/_posts/pytorch api.md","hash":"ce6a48823e5632c134ad323e7becba86fa1bd6df","modified":1658319801498},{"_id":"source/_posts/word 狗都不用.md","hash":"0b4b9024c6e97f02d9eaee723d1c2d81e8031327","modified":1658319792865},{"_id":"source/_posts/服务器杂记.md","hash":"dea0c55dd30dc8bcd6f3bab6e0b30d6a3c43c781","modified":1651114270986},{"_id":"source/about/index.md","hash":"9e0199cc238a8a1d47949a3fec67eda638af43ef","modified":1649140395383},{"_id":"source/categories/index.md","hash":"4ac455ffe881ae9dc8acb40e2dfe092289010ac2","modified":1649139759654},{"_id":"source/_posts/第一个博客.md","hash":"ec94bfac168cb62a5fc2a67be8a64b497270538e","modified":1654502113707},{"_id":"source/tags/index.md","hash":"cf57dc40881e70452d3376b9b4602360afd4006f","modified":1649140467032},{"_id":"source/_posts/论文的一些知识点.md","hash":"5279d11dc867ba011998bc32d1c49a64da693fe7","modified":1650164063217},{"_id":"source/_posts/hexo插入图片/2022-04-05-16-35-35-image.png","hash":"a94c8b25ca826cdfd95bf7fc3110801b504fbe45","modified":1649147735090},{"_id":"source/_posts/word 狗都不用/image-20220417173230383.png","hash":"1f1f605caf75852659050133b14ecf4217c2a5b0","modified":1650187950400},{"_id":"source/_posts/hexo插入图片/image-20220405160330232.png","hash":"114338bc170ac08c7b59e6432a33f8fca9234755","modified":1649145810239},{"_id":"source/_posts/服务器杂记/2022-04-05-16-38-14-image.png","hash":"ca76175b37d45d53ff35cd322710c4d81438a0cb","modified":1649147894799},{"_id":"source/_posts/服务器杂记/2022-04-05-16-38-21-image.png","hash":"41c8cb763702de3cb2051e343f4c4dcb15934d26","modified":1649147901866},{"_id":"source/_posts/服务器杂记/2022-04-05-16-38-34-image.png","hash":"b06c13578629ba462383a40dc9f1c9f31023948f","modified":1649147914230},{"_id":"source/_posts/论文的一些知识点/20200917181354293.png","hash":"28149051b3f83ff2216cbe0896ae5b67c078422b","modified":1649403247719},{"_id":"source/_posts/论文的一些知识点/format,png.png","hash":"63a4e7aab2bdc4513e6d254066bece6de48e2ed2","modified":1649402942633},{"_id":"source/_posts/论文的一些知识点/image-20220409152113601.png","hash":"4574f797189714928c3ae4a1465bf3f1f6015495","modified":1649488873604},{"_id":"source/_posts/论文的一些知识点/v2-04b23d86bf5b53a552f3b18e46d3f980_720w.jpg","hash":"700344ed115da41556d294b300ae934fe751a91d","modified":1649488843412},{"_id":"source/_posts/论文的一些知识点/798b-hqhtuak1849533.png","hash":"14ac5085b548d099c128c3c82ee50103154b1336","modified":1649404061208},{"_id":"source/_posts/论文的一些知识点/image-20220408161702659.png","hash":"9921135ef2e2c5b40dc58136807e9ced587869f4","modified":1649405822693},{"_id":"themes/maupassant/.travis.yml","hash":"f8da426b97088e4caa5226cff219a5d95087961f","modified":1649126068590},{"_id":"themes/maupassant/.gitignore","hash":"d7d27e5a9bcffe7f90dc2f4f0752e19020e40f40","modified":1649126068590},{"_id":"themes/maupassant/LICENSE","hash":"0663fd3a7ea9fc4f4c634b4d73e2da426b536f86","modified":1649126068591},{"_id":"themes/maupassant/README.md","hash":"f7f36a633be735f2d9f5c2746cc6b440eb60e03c","modified":1649126068592},{"_id":"themes/maupassant/_config.yml","hash":"0ddbe961160fcf8fbe368cdd45c7c52dad145dce","modified":1649140791452},{"_id":"themes/maupassant/package.json","hash":"5328c4c435cd4a5fe47caae31b9975013cdca5bb","modified":1649126068617},{"_id":"themes/maupassant/languages/de-DE.yml","hash":"25d1d8cd8113045a7603c14af1ea1539fc6456ed","modified":1649126068593},{"_id":"themes/maupassant/languages/en.yml","hash":"93674c5df281d7f5647fe500e10924008d8017c6","modified":1649126068594},{"_id":"themes/maupassant/languages/ko.yml","hash":"a454bcec60113507bc1d593a699849822386c196","modified":1649126068596},{"_id":"themes/maupassant/languages/ru.yml","hash":"36edc014c6aaef367d58929089bf7915375e71a6","modified":1649126068596},{"_id":"themes/maupassant/languages/es-ES.yml","hash":"3cc9312fbdba4a8f8e8254804121e4724c719bcc","modified":1649126068594},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"a6fa4ea6c3a59ae6ac13230d6154d1fdd6c149f3","modified":1649126068597},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"795f420382a150d570a06ffc278c4e7819260691","modified":1649126068598},{"_id":"themes/maupassant/layout/archive.pug","hash":"8582db9eeebad1478db36f996292e2536b677694","modified":1649126068612},{"_id":"themes/maupassant/layout/base-without-sidebar.pug","hash":"c03e722ee31cd464cf2e6e39467bcdf398f4151f","modified":1649126068612},{"_id":"themes/maupassant/languages/fr-FR.yml","hash":"3a50568f200b9c1258415b53727e42c6b6c7ea0b","modified":1649126068595},{"_id":"themes/maupassant/layout/base.pug","hash":"de21fa6e7ac20ef86c6ee93fc776f9ad5b164f21","modified":1649126068613},{"_id":"themes/maupassant/layout/page.pug","hash":"cb0aed2ea7892cdbc2f2ed7e3771e6a8229a31b8","modified":1649126068614},{"_id":"themes/maupassant/layout/index.pug","hash":"caa9bd16d9a6246e6e468865a0fe1aecde4457e8","modified":1649126068614},{"_id":"themes/maupassant/layout/post.pug","hash":"2101d882a46144a71a53c88cb9e12dbf1bd0290c","modified":1649126068614},{"_id":"themes/maupassant/layout/single-column.pug","hash":"8b4b731cdf86379d526821a1fa950bf15ed61f15","modified":1649126068615},{"_id":"themes/maupassant/layout/tagcloud.pug","hash":"0e35112fa2f10ef337728cc0354ca10f81353209","modified":1649126068615},{"_id":"themes/maupassant/layout/timeline.pug","hash":"b041b77a941b788fad78d522d013bc158efe168c","modified":1649126068616},{"_id":"themes/maupassant/source/favicon.ico","hash":"fcf730a94ee629854345889d533c57bbb2bd8973","modified":1658321080256},{"_id":"themes/maupassant/layout/_partial/after_footer.pug","hash":"363701b66eab291233490883b4d109355db9f18f","modified":1649126068599},{"_id":"themes/maupassant/layout/_partial/darkmode.pug","hash":"8a4c53229394ba6cf63afd427b4e6b1dc1156526","modified":1649126068600},{"_id":"themes/maupassant/layout/_partial/comments.pug","hash":"ad0c6f9e42b2bb0af58f19c441bbfb7bcf0fc7ab","modified":1649126068600},{"_id":"themes/maupassant/layout/_partial/footer.pug","hash":"92aa15e813bfb411803cc54218feb5410469a9c2","modified":1649126068601},{"_id":"themes/maupassant/layout/_partial/head.pug","hash":"bdbb27592f996f10a29f0e2754185b181e928ef9","modified":1649126068601},{"_id":"themes/maupassant/layout/_partial/helpers.pug","hash":"9e44f6d32f2449b4109c33118f8285fa2fc7b023","modified":1649126068602},{"_id":"themes/maupassant/layout/_partial/mathjax.pug","hash":"ac6e3a92bf18ab6bbd0e041b6796b295bae963ee","modified":1649126068603},{"_id":"themes/maupassant/layout/_partial/mathjax2.pug","hash":"234a792e64ba208fa97d2f99772ece23056a53ec","modified":1649126068603},{"_id":"themes/maupassant/layout/_partial/paginator.pug","hash":"03ad0c49ae6f8a999ae35b38d08e25775f51f52a","modified":1649126068603},{"_id":"themes/maupassant/layout/_partial/post_nav.pug","hash":"b11d9e6000449838b17f508429f29ffb60f53096","modified":1649126068604},{"_id":"themes/maupassant/layout/_widget/category.pug","hash":"e6bfc74e613f515dea534c22e4a9e1213c4db772","modified":1649126068607},{"_id":"themes/maupassant/layout/_widget/copyright.pug","hash":"4ee90ed25c0fb10d57ce3c58f8e4f725702637ef","modified":1649126068608},{"_id":"themes/maupassant/layout/_partial/tag.pug","hash":"fdc9f607854e1a0eec1f7a8b8f70d179216051a0","modified":1649126068604},{"_id":"themes/maupassant/layout/_partial/wordcount.pug","hash":"d7ebbdcee193e345e3f92539ddffd291a870b5f9","modified":1649126068606},{"_id":"themes/maupassant/layout/_partial/totop.pug","hash":"eb91a3baf9411188c7c8130f63a674f541ca9c81","modified":1649126068606},{"_id":"themes/maupassant/layout/_widget/links.pug","hash":"2452cb2ffa159304a0d34c117250a4d12bd1b63f","modified":1649126068608},{"_id":"themes/maupassant/layout/_widget/donate.pug","hash":"e29fa0b74b8b01f6fe5ee827ab6d7dd25bb0accb","modified":1649126068608},{"_id":"themes/maupassant/layout/_widget/recent_comments.pug","hash":"3f41457058740fe544ea061f29bb1e590271ff48","modified":1649126068609},{"_id":"themes/maupassant/source/css/copycode.scss","hash":"23fefb18f1d4dc7bde33e29d6ae737570277d943","modified":1649126068618},{"_id":"themes/maupassant/source/css/copyright.scss","hash":"ad420043e1d0518bfbf3b2a2d87fb5b104587c6f","modified":1649126068618},{"_id":"themes/maupassant/layout/_widget/recent_posts.pug","hash":"b717c372c8ff1285bcb87a4c28b318e9392bfbcc","modified":1649126068610},{"_id":"themes/maupassant/layout/_widget/search.pug","hash":"89ce6c4e34ab003662913aca3158a9e078feb6d5","modified":1649126068610},{"_id":"themes/maupassant/source/css/donate.scss","hash":"d9ef1520e136198c0ae13acef7da22a275fb4dbf","modified":1649126068619},{"_id":"themes/maupassant/layout/_widget/tag.pug","hash":"6d82d3c0def86d8f9445c9542f52033d2378956e","modified":1649126068611},{"_id":"themes/maupassant/source/css/search.scss","hash":"a1720a63170ff4ae9048f634e8e1900e7a3cc45a","modified":1649126068620},{"_id":"themes/maupassant/source/img/alipay.svg","hash":"3d94d2f9b09e352802628c9225578e1086f5fef3","modified":1649126068621},{"_id":"themes/maupassant/source/css/style.scss","hash":"a69ab23cc2bbb64560fa3c20a8535e747b0413e0","modified":1649126068621},{"_id":"themes/maupassant/source/img/bitcoin.svg","hash":"590b6b6462896168d08b30dfe2de5f08950d5553","modified":1649126068622},{"_id":"themes/maupassant/source/img/github.svg","hash":"277798d16cb6106e45ef74f6b9972011fa43401b","modified":1649126068623},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"c77270e684a60babc1abb7353e700ecdc5a66d30","modified":1649126068626},{"_id":"themes/maupassant/source/img/like.svg","hash":"e6e4bd1af076be9358316cac89efdc22ef4a5064","modified":1649126068624},{"_id":"themes/maupassant/source/js/copycode.js","hash":"6df3139581744e7bcd47243e4587f5397c2a24c3","modified":1649126068627},{"_id":"themes/maupassant/source/js/copyright.js","hash":"0e9a845ae05d2f00721ff6ee910c8c3cace26043","modified":1649126068627},{"_id":"themes/maupassant/source/img/paypal.svg","hash":"09786c983a10bc570dcd05b87cec601e9d01eb00","modified":1649126068625},{"_id":"themes/maupassant/source/js/donate.js","hash":"82f06bd69782c1138c98b4276771a41e3a54c061","modified":1649126068628},{"_id":"themes/maupassant/source/js/fancybox.js","hash":"8a993c1c4ad40789d2960b682cb2130382a0f26a","modified":1649126068628},{"_id":"themes/maupassant/source/img/wechat.svg","hash":"19c1f68ec8c0b8e9f7855e7a6e78077f70a1aedc","modified":1649126068625},{"_id":"themes/maupassant/source/js/love.js","hash":"60df5dc3d09c8f33d1d02f54cbc73bf8d62f52fb","modified":1649126068629},{"_id":"themes/maupassant/source/js/search.js","hash":"65d8e6d6c46fa060ce5b0d89e2fd778b6b2967d5","modified":1649126068630},{"_id":"themes/maupassant/source/js/share.js","hash":"514e726c1efae9f6566600fa0e945b4b9e620f2e","modified":1649126068630},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"150ab1cad40d7ae081b0896b13f7d7cbac4e6338","modified":1649126068631},{"_id":"themes/maupassant/source/js/totop.js","hash":"15de186b089c245fe60766d509b587919f05ff23","modified":1649126068631},{"_id":"source/_posts/论文的一些知识点/home.phpmod=attachment&filename=image.png&id=702090","hash":"753fb80eecdd84d559ac44dc1d139270e75d9763","modified":1649476236415},{"_id":"source/_posts/论文的一些知识点/home.phpmod=attachment&filename=image.png&id=702104","hash":"9d58685fda6d8832d1f1bfe4e0f19af64440e8cb","modified":1649476738454},{"_id":"source/_posts/论文的一些知识点/home.phpmod=attachment&filename=image.png&id=702089","hash":"71de146510296157f74011fe56926b8d993006c5","modified":1649476269074},{"_id":"source/_posts/论文的一些知识点/home.phpmod=attachment&filename=image.png&id=702099","hash":"858daf705c2c2a1d5314fd11458be239b0cc472d","modified":1649476303623},{"_id":"source/_posts/论文的一些知识点/v2-2a2307d5c20551f1a3e8458c7070cf16_b.webp","hash":"c883f882924c3bfe1784b2a8b1c507c3dbe42963","modified":1649490265336},{"_id":"public/about/index.html","hash":"e4ec870996f4ca433a19179563664efb0db57c69","modified":1658321307214},{"_id":"public/categories/index.html","hash":"890bedb649858fa3eb434be961b3d498fbb8ba0a","modified":1658321307214},{"_id":"public/tags/index.html","hash":"f9a5178738dd60313994ff02a29e737fbecf8fef","modified":1658321307214},{"_id":"public/2022/06/06/pytorch api/index.html","hash":"60d5f74eeb3c31c9c475ba787aa7723bb8a315ad","modified":1658321307214},{"_id":"public/2022/05/03/fastgithub 使用心得/index.html","hash":"4f59cefc248c415a1a2afcd8ec246909e06cb500","modified":1658321307214},{"_id":"public/2022/04/12/word 狗都不用/index.html","hash":"32129ef8552622815d5d12f99c757bc344f79ea5","modified":1658321307214},{"_id":"public/2022/04/05/hexo插入图片/index.html","hash":"9127f5efce89000692b34d7a534f17622e92ca57","modified":1658321307214},{"_id":"public/2022/04/05/第一个博客/index.html","hash":"1d9a67dae1032037922c262ed0b14e4ac3c4fa76","modified":1658321307214},{"_id":"public/archives/index.html","hash":"d6865e102a7a743033f62385b6926790dc64e969","modified":1658321307214},{"_id":"public/archives/2022/index.html","hash":"d6865e102a7a743033f62385b6926790dc64e969","modified":1658321307214},{"_id":"public/archives/2022/04/index.html","hash":"51054d2a384a3fdfee160367241316a4e9bd950c","modified":1658321307214},{"_id":"public/archives/2022/05/index.html","hash":"59b7766604c7b97020c6bfa46e7627247a571a05","modified":1658321307214},{"_id":"public/archives/2022/06/index.html","hash":"15921b40d2b3cd0e245e27d861cb2cfe52260e6f","modified":1658321307214},{"_id":"public/tags/ubuntu/index.html","hash":"6014ca0e9314cef35db5352a408118c919506435","modified":1658321307214},{"_id":"public/index.html","hash":"1d54a816867088dbf6de6633beb99375bdfe97a5","modified":1658321307214},{"_id":"public/tags/hexo/index.html","hash":"135d03b132adfd038c513ce479f2b431b065c070","modified":1658321307214},{"_id":"public/2022/04/08/论文的一些知识点/index.html","hash":"2200d68f684d6bc865cafdbb2896db192a07339e","modified":1658321307214},{"_id":"public/2022/04/05/服务器杂记/index.html","hash":"8464e98ee215d88ddd13d92d807d4b67240a0404","modified":1658321307214},{"_id":"public/tags/word/index.html","hash":"6cb40ed9e61b07f32b0dcc864a23b8d260313708","modified":1658321307214},{"_id":"public/tags/深度学习/index.html","hash":"18e240f7547245b8220f31ca3874b0d16e5d5096","modified":1658321307214},{"_id":"public/favicon.ico","hash":"fcf730a94ee629854345889d533c57bbb2bd8973","modified":1658321307214},{"_id":"public/img/alipay.svg","hash":"3d94d2f9b09e352802628c9225578e1086f5fef3","modified":1658321307214},{"_id":"public/img/bitcoin.svg","hash":"590b6b6462896168d08b30dfe2de5f08950d5553","modified":1658321307214},{"_id":"public/img/github.svg","hash":"277798d16cb6106e45ef74f6b9972011fa43401b","modified":1658321307214},{"_id":"public/img/like.svg","hash":"e6e4bd1af076be9358316cac89efdc22ef4a5064","modified":1658321307214},{"_id":"public/img/paypal.svg","hash":"09786c983a10bc570dcd05b87cec601e9d01eb00","modified":1658321307214},{"_id":"public/img/wechat.svg","hash":"19c1f68ec8c0b8e9f7855e7a6e78077f70a1aedc","modified":1658321307214},{"_id":"public/2022/04/05/hexo插入图片/2022-04-05-16-35-35-image.png","hash":"a94c8b25ca826cdfd95bf7fc3110801b504fbe45","modified":1658321307214},{"_id":"public/2022/04/05/hexo插入图片/image-20220405160330232.png","hash":"114338bc170ac08c7b59e6432a33f8fca9234755","modified":1658321307214},{"_id":"public/2022/04/05/服务器杂记/2022-04-05-16-38-14-image.png","hash":"ca76175b37d45d53ff35cd322710c4d81438a0cb","modified":1658321307214},{"_id":"public/2022/04/12/word 狗都不用/image-20220417173230383.png","hash":"1f1f605caf75852659050133b14ecf4217c2a5b0","modified":1658321307214},{"_id":"public/2022/04/05/服务器杂记/2022-04-05-16-38-21-image.png","hash":"41c8cb763702de3cb2051e343f4c4dcb15934d26","modified":1658321307214},{"_id":"public/2022/04/08/论文的一些知识点/20200917181354293.png","hash":"28149051b3f83ff2216cbe0896ae5b67c078422b","modified":1658321307214},{"_id":"public/2022/04/05/服务器杂记/2022-04-05-16-38-34-image.png","hash":"b06c13578629ba462383a40dc9f1c9f31023948f","modified":1658321307214},{"_id":"public/2022/04/08/论文的一些知识点/format,png.png","hash":"63a4e7aab2bdc4513e6d254066bece6de48e2ed2","modified":1658321307214},{"_id":"public/2022/04/08/论文的一些知识点/v2-04b23d86bf5b53a552f3b18e46d3f980_720w.jpg","hash":"700344ed115da41556d294b300ae934fe751a91d","modified":1658321307214},{"_id":"public/2022/04/08/论文的一些知识点/image-20220409152113601.png","hash":"4574f797189714928c3ae4a1465bf3f1f6015495","modified":1658321307214},{"_id":"public/2022/04/08/论文的一些知识点/798b-hqhtuak1849533.png","hash":"14ac5085b548d099c128c3c82ee50103154b1336","modified":1658321307214},{"_id":"public/css/copyright.css","hash":"a6f68c735d459babe3f4f5c4412a635d8debaed5","modified":1658321307214},{"_id":"public/css/copycode.css","hash":"6abe2cb370b88a9884f5a10e29624b2f8ef24c89","modified":1658321307214},{"_id":"public/css/donate.css","hash":"f5126ddcc9dab3490c01e0ee26dd3ed46bac9988","modified":1658321307214},{"_id":"public/css/search.css","hash":"22fba8b3e985236a417e82486f07542562e06ee7","modified":1658321307214},{"_id":"public/js/copycode.js","hash":"fde1f153bab1f00ae8930668094c00aa9ff3c7a3","modified":1658321307214},{"_id":"public/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1658321307214},{"_id":"public/js/copyright.js","hash":"7b1bd775ea22abf33d57f78628f436bf656e439a","modified":1658321307214},{"_id":"public/js/donate.js","hash":"bdddd8d9847462d020f7a511e7e12c046223195d","modified":1658321307214},{"_id":"public/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1658321307214},{"_id":"public/js/share.js","hash":"a2f9de374523dc7f2ddb90ed5f24b668c20d9272","modified":1658321307214},{"_id":"public/js/love.js","hash":"5cf89f622bf891cf1986845eb92eadef6f358eb7","modified":1658321307214},{"_id":"public/js/search.js","hash":"6fdfd143646d12b8dbef9b5809cea768192f08aa","modified":1658321307214},{"_id":"public/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1658321307214},{"_id":"public/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1658321307214},{"_id":"public/css/style.css","hash":"4735627811dd6de51dd1a3c7da9e62102d98c355","modified":1658321307214},{"_id":"public/2022/04/08/论文的一些知识点/image-20220408161702659.png","hash":"9921135ef2e2c5b40dc58136807e9ced587869f4","modified":1658321307214},{"_id":"public/2022/04/08/论文的一些知识点/home.phpmod=attachment&filename=image.png&id=702090","hash":"753fb80eecdd84d559ac44dc1d139270e75d9763","modified":1658321307214},{"_id":"public/2022/04/08/论文的一些知识点/home.phpmod=attachment&filename=image.png&id=702104","hash":"9d58685fda6d8832d1f1bfe4e0f19af64440e8cb","modified":1658321307214},{"_id":"public/2022/04/08/论文的一些知识点/home.phpmod=attachment&filename=image.png&id=702089","hash":"71de146510296157f74011fe56926b8d993006c5","modified":1658321307214},{"_id":"public/2022/04/08/论文的一些知识点/home.phpmod=attachment&filename=image.png&id=702099","hash":"858daf705c2c2a1d5314fd11458be239b0cc472d","modified":1658321307214},{"_id":"public/2022/04/08/论文的一些知识点/v2-2a2307d5c20551f1a3e8458c7070cf16_b.webp","hash":"c883f882924c3bfe1784b2a8b1c507c3dbe42963","modified":1658321307214}],"Category":[],"Data":[],"Page":[{"title":"关于页","date":"2022-04-05T06:31:42.000Z","type":"about","_content":"# \n","source":"about/index.md","raw":"---\ntitle: 关于页\ndate: 2022-04-05 14:31:42\ntype: about\n---\n# \n","updated":"2022-04-05T06:33:15.383Z","path":"about/index.html","comments":1,"layout":"page","_id":"cl5tlovx50000ewvk6q3gb4s9","content":"<h1 id><a href=\"#\" class=\"headerlink\" title></a></h1>","site":{"data":{}},"excerpt":"","more":"<h1 id><a href=\"#\" class=\"headerlink\" title></a></h1>"},{"title":"categories","date":"2022-04-05T06:22:23.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-04-05 14:22:23\ntype: categories\n---\n","updated":"2022-04-05T06:22:39.654Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cl5tlovxc0002ewvk11r17nw0","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2022-04-05T06:34:10.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-04-05 14:34:10\ntype: tags\n---\n","updated":"2022-04-05T06:34:27.032Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cl5tlovxg0005ewvkc3nl2v8h","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"服务器杂记","date":"2022-06-06T08:40:39.000Z","description":"接触到的一些问题","_content":"\n## kaggle api 在 colab上\n\n~~~python\n!mkdir ~/.kaggle\n!touch ~/.kaggle/kaggle.json\n\napi_token = {\"username\":\"livelove\",\"key\":\"179d8a4f8b02cb9a917b2d5c9b4c01b0\"}\n\nimport json\n\nwith open('/root/.kaggle/kaggle.json', 'w') as file:\n    json.dump(api_token, file)\n\n!chmod 600 ~/.kaggle/kaggle.json\n~~~\n\n## 挂载谷歌云盘\n\n~~~python\nfrom google.colab import drive\ndrive.mount('/content/gdrive')\n~~~\n\n## 下载 UCF101 数据集\n\n~~~bash\n!kaggle datasets download -d pevogam/ucf101-frames\n!unzip /content/ucf101-frames.zip\n!rm /content/ucf101-frames.zip\n!mkdir ucf101\n!mv test/* ucf101\n!rsync -a /content/train /content/ucf101\n~~~\n\n\n\n","source":"_posts/pytorch api.md","raw":"---\ntitle: 服务器杂记\ndate: 2022-06-06 16:40:39\ntags: ubuntu\ndescription: 接触到的一些问题\n---\n\n## kaggle api 在 colab上\n\n~~~python\n!mkdir ~/.kaggle\n!touch ~/.kaggle/kaggle.json\n\napi_token = {\"username\":\"livelove\",\"key\":\"179d8a4f8b02cb9a917b2d5c9b4c01b0\"}\n\nimport json\n\nwith open('/root/.kaggle/kaggle.json', 'w') as file:\n    json.dump(api_token, file)\n\n!chmod 600 ~/.kaggle/kaggle.json\n~~~\n\n## 挂载谷歌云盘\n\n~~~python\nfrom google.colab import drive\ndrive.mount('/content/gdrive')\n~~~\n\n## 下载 UCF101 数据集\n\n~~~bash\n!kaggle datasets download -d pevogam/ucf101-frames\n!unzip /content/ucf101-frames.zip\n!rm /content/ucf101-frames.zip\n!mkdir ucf101\n!mv test/* ucf101\n!rsync -a /content/train /content/ucf101\n~~~\n\n\n\n","slug":"pytorch api","published":1,"updated":"2022-07-20T12:23:21.498Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5tlovx80001ewvk1vw70w30","content":"<h2 id=\"kaggle-api-在-colab上\"><a href=\"#kaggle-api-在-colab上\" class=\"headerlink\" title=\"kaggle api 在 colab上\"></a>kaggle api 在 colab上</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!mkdir ~/.kaggle</span><br><span class=\"line\">!touch ~/.kaggle/kaggle.json</span><br><span class=\"line\"></span><br><span class=\"line\">api_token = &#123;<span class=\"string\">&quot;username&quot;</span>:<span class=\"string\">&quot;livelove&quot;</span>,<span class=\"string\">&quot;key&quot;</span>:<span class=\"string\">&quot;179d8a4f8b02cb9a917b2d5c9b4c01b0&quot;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;/root/.kaggle/kaggle.json&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">    json.dump(api_token, file)</span><br><span class=\"line\"></span><br><span class=\"line\">!chmod <span class=\"number\">600</span> ~/.kaggle/kaggle.json</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"挂载谷歌云盘\"><a href=\"#挂载谷歌云盘\" class=\"headerlink\" title=\"挂载谷歌云盘\"></a>挂载谷歌云盘</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> google.colab <span class=\"keyword\">import</span> drive</span><br><span class=\"line\">drive.mount(<span class=\"string\">&#x27;/content/gdrive&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"下载-UCF101-数据集\"><a href=\"#下载-UCF101-数据集\" class=\"headerlink\" title=\"下载 UCF101 数据集\"></a>下载 UCF101 数据集</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!kaggle datasets download -d pevogam/ucf101-frames</span><br><span class=\"line\">!unzip /content/ucf101-frames.zip</span><br><span class=\"line\">!<span class=\"built_in\">rm</span> /content/ucf101-frames.zip</span><br><span class=\"line\">!<span class=\"built_in\">mkdir</span> ucf101</span><br><span class=\"line\">!<span class=\"built_in\">mv</span> <span class=\"built_in\">test</span>/* ucf101</span><br><span class=\"line\">!rsync -a /content/train /content/ucf101</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"kaggle-api-在-colab上\"><a href=\"#kaggle-api-在-colab上\" class=\"headerlink\" title=\"kaggle api 在 colab上\"></a>kaggle api 在 colab上</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!mkdir ~/.kaggle</span><br><span class=\"line\">!touch ~/.kaggle/kaggle.json</span><br><span class=\"line\"></span><br><span class=\"line\">api_token = &#123;<span class=\"string\">&quot;username&quot;</span>:<span class=\"string\">&quot;livelove&quot;</span>,<span class=\"string\">&quot;key&quot;</span>:<span class=\"string\">&quot;179d8a4f8b02cb9a917b2d5c9b4c01b0&quot;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;/root/.kaggle/kaggle.json&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">    json.dump(api_token, file)</span><br><span class=\"line\"></span><br><span class=\"line\">!chmod <span class=\"number\">600</span> ~/.kaggle/kaggle.json</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"挂载谷歌云盘\"><a href=\"#挂载谷歌云盘\" class=\"headerlink\" title=\"挂载谷歌云盘\"></a>挂载谷歌云盘</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> google.colab <span class=\"keyword\">import</span> drive</span><br><span class=\"line\">drive.mount(<span class=\"string\">&#x27;/content/gdrive&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"下载-UCF101-数据集\"><a href=\"#下载-UCF101-数据集\" class=\"headerlink\" title=\"下载 UCF101 数据集\"></a>下载 UCF101 数据集</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!kaggle datasets download -d pevogam/ucf101-frames</span><br><span class=\"line\">!unzip /content/ucf101-frames.zip</span><br><span class=\"line\">!<span class=\"built_in\">rm</span> /content/ucf101-frames.zip</span><br><span class=\"line\">!<span class=\"built_in\">mkdir</span> ucf101</span><br><span class=\"line\">!<span class=\"built_in\">mv</span> <span class=\"built_in\">test</span>/* ucf101</span><br><span class=\"line\">!rsync -a /content/train /content/ucf101</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"hexo插入图片","date":"2022-04-05T07:56:50.000Z","description":"在hexo 中插入图片的尝试","_content":"\n安装\n\n```bash\nnpm install hexo-asset-image-for-hexo5 --save\n```\n\n然后在 _config.yml 中设置 post_asset_folder为true\n这样的后果是 _posts 文件夹下面乱糟糟的\n\n![image-20220405160330232](hexo插入图片/image-20220405160330232.png)\n\n要怎么将全部图片都放在同一个文件夹 images 下呢？\n\n","source":"_posts/hexo插入图片.md","raw":"---\ntitle: hexo插入图片\ndate: 2022-04-05 15:56:50\ntags: hexo\ndescription: 在hexo 中插入图片的尝试\n---\n\n安装\n\n```bash\nnpm install hexo-asset-image-for-hexo5 --save\n```\n\n然后在 _config.yml 中设置 post_asset_folder为true\n这样的后果是 _posts 文件夹下面乱糟糟的\n\n![image-20220405160330232](hexo插入图片/image-20220405160330232.png)\n\n要怎么将全部图片都放在同一个文件夹 images 下呢？\n\n","slug":"hexo插入图片","published":1,"updated":"2022-04-09T07:42:04.552Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5tlovxc0003ewvk3ea049zw","content":"<p>安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-asset-image-for-hexo5 --save</span><br></pre></td></tr></table></figure>\n\n<p>然后在 _config.yml 中设置 post_asset_folder为true<br>这样的后果是 _posts 文件夹下面乱糟糟的</p>\n<p><img src=\"/2022/04/05/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/image-20220405160330232.png\" alt=\"image-20220405160330232\"></p>\n<p>要怎么将全部图片都放在同一个文件夹 images 下呢？</p>\n","site":{"data":{}},"excerpt":"","more":"<p>安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-asset-image-for-hexo5 --save</span><br></pre></td></tr></table></figure>\n\n<p>然后在 _config.yml 中设置 post_asset_folder为true<br>这样的后果是 _posts 文件夹下面乱糟糟的</p>\n<p><img src=\"/2022/04/05/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/image-20220405160330232.png\" alt=\"image-20220405160330232\"></p>\n<p>要怎么将全部图片都放在同一个文件夹 images 下呢？</p>\n"},{"title":"fastgithub 的使用","date":"2022-05-03T03:35:51.896Z","description":"在hexo 中插入图片的尝试","_content":"## 原因\n\n在用到实验室服务器的时候，不可避免地需要github的服务，例如上传代码啥的，经常会碰到上传不了的问题。\n\n[]截图\n\n## fastgithub 使用方法\n\n[FastGithub 地址](https://github.com/dotnetcore/FastGithub)\n\n~~~bash\nwget https://github.com/dotnetcore/FastGithub/releases/download/2.1.4/fastgithub_linux-x64.zip\nunzip fastgithub_linux-x64.zip\nrm fastgithub_linux-x64.zip\ncd fastgithub_linux-x64\nsudo ./fastgithub\n或者 sudo ./fastgithub start\n\n~~~\n\n可能因为服务器是docker 容器，服务器运行 sudo ./fastgithub start 其实没有这个服务，实测也用不了代理，所以我使用了命令\n\n~~~bash\nsudo ./fastgithub # 先写入证书\nctrl+c 中断\nnohup ./fastgithub &\n~~~\n\n写入 服务器代理\n\n~~~bash\nexport all_proxy=\"http://127.0.0.1:38457\"\n\n#或者全局生效\n\nsvim /etc/profile    #编辑全局配置文件\n#在末尾添加 export all_proxy=\"http://127.0.0.1:38457\"\nsource /etc/profile    #试配置文件生效\n# https://www.cnblogs.com/sinicheveen/p/13641007.html\n~~~","source":"_posts/fastgithub 使用心得.md","raw":"---\ntitle: fastgithub 的使用\ndate: 2022-04-06 12：00：00\ntags: hexo\ndescription: 在hexo 中插入图片的尝试\n---\n## 原因\n\n在用到实验室服务器的时候，不可避免地需要github的服务，例如上传代码啥的，经常会碰到上传不了的问题。\n\n[]截图\n\n## fastgithub 使用方法\n\n[FastGithub 地址](https://github.com/dotnetcore/FastGithub)\n\n~~~bash\nwget https://github.com/dotnetcore/FastGithub/releases/download/2.1.4/fastgithub_linux-x64.zip\nunzip fastgithub_linux-x64.zip\nrm fastgithub_linux-x64.zip\ncd fastgithub_linux-x64\nsudo ./fastgithub\n或者 sudo ./fastgithub start\n\n~~~\n\n可能因为服务器是docker 容器，服务器运行 sudo ./fastgithub start 其实没有这个服务，实测也用不了代理，所以我使用了命令\n\n~~~bash\nsudo ./fastgithub # 先写入证书\nctrl+c 中断\nnohup ./fastgithub &\n~~~\n\n写入 服务器代理\n\n~~~bash\nexport all_proxy=\"http://127.0.0.1:38457\"\n\n#或者全局生效\n\nsvim /etc/profile    #编辑全局配置文件\n#在末尾添加 export all_proxy=\"http://127.0.0.1:38457\"\nsource /etc/profile    #试配置文件生效\n# https://www.cnblogs.com/sinicheveen/p/13641007.html\n~~~","slug":"fastgithub 使用心得","published":1,"updated":"2022-07-20T12:23:54.750Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5tlovxh0006ewvk598w51or","content":"<h2 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h2><p>在用到实验室服务器的时候，不可避免地需要github的服务，例如上传代码啥的，经常会碰到上传不了的问题。</p>\n<p>[]截图</p>\n<h2 id=\"fastgithub-使用方法\"><a href=\"#fastgithub-使用方法\" class=\"headerlink\" title=\"fastgithub 使用方法\"></a>fastgithub 使用方法</h2><p><a href=\"https://github.com/dotnetcore/FastGithub\">FastGithub 地址</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/dotnetcore/FastGithub/releases/download/2.1.4/fastgithub_linux-x64.zip</span><br><span class=\"line\">unzip fastgithub_linux-x64.zip</span><br><span class=\"line\"><span class=\"built_in\">rm</span> fastgithub_linux-x64.zip</span><br><span class=\"line\"><span class=\"built_in\">cd</span> fastgithub_linux-x64</span><br><span class=\"line\">sudo ./fastgithub</span><br><span class=\"line\">或者 sudo ./fastgithub start</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>可能因为服务器是docker 容器，服务器运行 sudo ./fastgithub start 其实没有这个服务，实测也用不了代理，所以我使用了命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ./fastgithub <span class=\"comment\"># 先写入证书</span></span><br><span class=\"line\">ctrl+c 中断</span><br><span class=\"line\"><span class=\"built_in\">nohup</span> ./fastgithub &amp;</span><br></pre></td></tr></table></figure>\n\n<p>写入 服务器代理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> all_proxy=<span class=\"string\">&quot;http://127.0.0.1:38457&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#或者全局生效</span></span><br><span class=\"line\"></span><br><span class=\"line\">svim /etc/profile    <span class=\"comment\">#编辑全局配置文件</span></span><br><span class=\"line\"><span class=\"comment\">#在末尾添加 export all_proxy=&quot;http://127.0.0.1:38457&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile    <span class=\"comment\">#试配置文件生效</span></span><br><span class=\"line\"><span class=\"comment\"># https://www.cnblogs.com/sinicheveen/p/13641007.html</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h2><p>在用到实验室服务器的时候，不可避免地需要github的服务，例如上传代码啥的，经常会碰到上传不了的问题。</p>\n<p>[]截图</p>\n<h2 id=\"fastgithub-使用方法\"><a href=\"#fastgithub-使用方法\" class=\"headerlink\" title=\"fastgithub 使用方法\"></a>fastgithub 使用方法</h2><p><a href=\"https://github.com/dotnetcore/FastGithub\">FastGithub 地址</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/dotnetcore/FastGithub/releases/download/2.1.4/fastgithub_linux-x64.zip</span><br><span class=\"line\">unzip fastgithub_linux-x64.zip</span><br><span class=\"line\"><span class=\"built_in\">rm</span> fastgithub_linux-x64.zip</span><br><span class=\"line\"><span class=\"built_in\">cd</span> fastgithub_linux-x64</span><br><span class=\"line\">sudo ./fastgithub</span><br><span class=\"line\">或者 sudo ./fastgithub start</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>可能因为服务器是docker 容器，服务器运行 sudo ./fastgithub start 其实没有这个服务，实测也用不了代理，所以我使用了命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ./fastgithub <span class=\"comment\"># 先写入证书</span></span><br><span class=\"line\">ctrl+c 中断</span><br><span class=\"line\"><span class=\"built_in\">nohup</span> ./fastgithub &amp;</span><br></pre></td></tr></table></figure>\n\n<p>写入 服务器代理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> all_proxy=<span class=\"string\">&quot;http://127.0.0.1:38457&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#或者全局生效</span></span><br><span class=\"line\"></span><br><span class=\"line\">svim /etc/profile    <span class=\"comment\">#编辑全局配置文件</span></span><br><span class=\"line\"><span class=\"comment\">#在末尾添加 export all_proxy=&quot;http://127.0.0.1:38457&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile    <span class=\"comment\">#试配置文件生效</span></span><br><span class=\"line\"><span class=\"comment\"># https://www.cnblogs.com/sinicheveen/p/13641007.html</span></span><br></pre></td></tr></table></figure>"},{"title":"word 真是狗都不用","date":"2022-04-12T12:46:50.000Z","mathjax":true,"description":"word 公式太难用了","_content":"\n\n\n从一个文件复制公式到另外一个文件后，公式变了\n\n- word 跨页断行\n\n<img src=\"word 狗都不用/image-20220417173230383.png\" alt=\"image-20220417173230383\" style=\"zoom: 80%;\" />","source":"_posts/word 狗都不用.md","raw":"---\ntitle: word 真是狗都不用\ndate: 2022-04-12 20:46:50\ntags: word\nmathjax: true\ndescription: word 公式太难用了\n---\n\n\n\n从一个文件复制公式到另外一个文件后，公式变了\n\n- word 跨页断行\n\n<img src=\"word 狗都不用/image-20220417173230383.png\" alt=\"image-20220417173230383\" style=\"zoom: 80%;\" />","slug":"word 狗都不用","published":1,"updated":"2022-07-20T12:23:12.865Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5tlovxi0007ewvk4qgh7qsx","content":"<p>从一个文件复制公式到另外一个文件后，公式变了</p>\n<ul>\n<li>word 跨页断行</li>\n</ul>\n<img src=\"/2022/04/12/word%20%E7%8B%97%E9%83%BD%E4%B8%8D%E7%94%A8/image-20220417173230383.png\" alt=\"image-20220417173230383\" style=\"zoom: 80%;\">","site":{"data":{}},"excerpt":"","more":"<p>从一个文件复制公式到另外一个文件后，公式变了</p>\n<ul>\n<li>word 跨页断行</li>\n</ul>\n<img src=\"/2022/04/12/word%20%E7%8B%97%E9%83%BD%E4%B8%8D%E7%94%A8/image-20220417173230383.png\" alt=\"image-20220417173230383\" style=\"zoom: 80%;\">"},{"title":"服务器杂记","date":"2022-04-05T08:40:39.000Z","description":"接触到的一些问题","_content":"\n# 服务器杂记\n\n## 安装jdk\n\nyum search java | grep jdk\n\nyum install 其中一个\n\n## scp 命令传递文件\n\nscp 源 root@ip:路径\n\n~~~bash\n# -r 文件夹\n# -P 对方的端口\nscp -P 2023 -r \"/home/cike/projects/python_utils/\" cike@222.201.134.237:/home/cike/projects\n\nscp -P 2023 \"/home/cike/projects/ActionCLIP/exp/clip_ucf/ViT-B/16/ucf101/20220426_092526/model_best.pt\" cike@222.201.134.237:/home/cike/\n~~~\n\nnohup scp -P 2023 -r \"/home/cike/datasets/k400/rawframes_train/\" cike@222.201.134.237:/home/cike/datasets/k400_val_raw &\n\n## 安装 anaconda\n\n```bash\nwget https://repo.anaconda.com/archive/Anaconda3-2021.11-Linux-x86_64.sh\nbash Anaconda3-2021.11-Linux-x86_64.sh\nvi ~/.bashrc #编辑环境变量\n# 添加 export PATH=\"/home/Sweeneys/anaconda3/bin:$PATH\"\nsource ~/.bashrc #刷新环境变量\n```\n\n## 使用 vscode 连接服务器\n\n```bash\nssh-keygen #生成密钥\n```\n\n我之前用腾讯的服务器，已经生成过一次了，一对密钥可以给多个服务器使用。\n\n密钥对的文件名称为 id_rsa 和 id_rsa.pub，应该分别是私钥和公钥\n\n将 公钥 id_rsa.pub 放到服务器中的 ~/.ssh 文件夹中，然后\n\n```bash\ncat id_rsa.pub >> authorized_keys\n```\n\n即可。\n\n![](服务器杂记/2022-04-05-16-38-14-image.png)\n\n点击齿轮，选择配置文件，可以将配置文件放在 D盘中，然后编辑配置文件即可。\n\n![](服务器杂记/2022-04-05-16-38-21-image.png)\n\n## wandb未登录？\n\n成功解决：wandb.errors.UsageError: api_key not configured (no-tty). call wandb.login(key=[your_api_key])\n\n方法：输入 python, \n\n```\nimport wandb\nwandb.login()\n输入密钥\n退出重新运行代码就行了\n```\n\n## github 一直 clone 不下来\n\ngnutls_handshake() failed: The TLS connection was non-properly terminated\n\n```bash\ngit config --global https.https://github.com.proxy # \ngit config --global http.https://github.com.proxy \n# 或者配置成本机自带的代理\ngit config --global http.https://127.0.0.1:10809 \n```\n\n取消配置\n\n```bash\ngit config --global --unset http.proxy\ngit config --global --unset https.proxy\n```\n\n查看 配置\n\n```bash\ngit config --global http.proxy\n```\n\ngit 配置\n\n```bash\ngit config --global user.email \"[xuning446@gmail.com](mailto:xuning446@gmail.com)\"\ngit config --global user.name \"xuning\"\n```\n\n或者使用镜像服务：[GitHub: Where the world builds software · GitHub (fastgit.xyz)](https://hub.fastgit.xyz/)\n\n## 安装 yapf 可以让 vscode 识别python 解释器\n\n```bash\nconda install -c conda-forge yapf\n```\n\n## 将某用户加入到管理员组\n\n- vi /etc/sudoers\n- ![](服务器杂记/2022-04-05-16-38-34-image.png)\n\n## Ubuntu 换镜像源\n\n```bash\nvi /etc/apt/sources.list\n# https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/ \n# 进网站复制源\n#更换源之后记得要\nsudo apt-get update\n```\n\n## 下载 UCF101 数据集\n\n```bash\nwget https://www.crcv.ucf.edu/data/UCF101/UCF101.rar --no-check-certificate\n```\n\n## SCP 传输文件\n\n- 本地复制到远程\n  - scp -P 2043 UCF101.rar cike@202.38.247.164:/home/cike/datasets\n\n## zsh 与 conda 不兼容？\n\n```bash\nconda init zsh\n```\n\nhttps://github.com/ohmyzsh/ohmyzsh/issues/9061\n\nhttps://www.cnblogs.com/lcgbk/p/13255836.html\n\nzsh 安装教程\n\n```bash\napt install zsh\n\nchsh -s /bin/zsh\n\n# 重启后\n\nsh -c \"$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)\"\n\n# 修改主题\nvim ~/.zshrc\n# s\nsource ~/.zshrc\n```\n\n## nohup 日志相关\n\n只输出错误信息到日志文件：\n\n```bash\nnohup ./program >/dev/null 2>log & # 2是错误信息\n```\n\n什么日志都不要：\n\n```bash\nnohup ./program >/dev/null 2>&1 &\n```\n\n## 安装node\n\n```bash\nwget https://nodejs.org/dist/v16.14.2/node-v16.14.2-linux-x64.tar.xz\n\ntar -xf node-v16.14.2-linux-x64.tar.xz\n\n    a、切换到 root 用户\n    b、vi /etc/profile\n    c、在最下面加入\n       # node （注释作用）\n       export NODE_HOME=/usr/local/src/node-v4.2.3-linux-x86\n       export PATH=$PATH:$NODE_HOME/bin  \n       export NODE_PATH=$NODE_HOME/lib/node_modules\n    d、:wq （保存并退出）\n    e、source /etc/profile （使配置文件生效）\n```\n\nvue 项目中 命令 npm run build 生成的 dist 下的文件可以直接使用 live server 打开，而且可以部署到GitHub pages 上。（应该仅限于静态网页）\n\n## -bash: /bin/mv: Argument list too long的解决方案\n\n在linux服务器移动文件的时候，我们一般是 mv 源文件  目标目录，如\n\n[.....]# mv ../blog/* .\n\n-bash: /bin/mv: Argument list too long\n\n\n\n上面mv的时候会报参数过长，解决方案如下：\n\nfind source file_path -type f -name '*. jpg' -exec mv {} target_path \\;\n\n示例：\n\n~~~bash\nfind ../blog/ -type f -name '*.html' -exec mv {} . \\;\n\nfind train/ -name '*.*' -exec mv {} /home/cike/projects/mmaction/data/kinetics400/videos_train \\；\n\nfind val/ -name '*.*' -exec mv {} /home/cike/projects/mmaction/data/kinetics400/videos_val \\；\n~~~\n\n## detox 命令\n\n The detox utility renames files to make them easier to work with.  It removes spaces and\n     other such annoyances.  It'll also translate or cleanup Latin-1 (ISO 8859-1) characters\n     encoded in 8-bit ASCII, Unicode characters encoded in UTF-8, and CGI escaped characters.\n\n## 如何在 VScode 或者winscp中显示符号链接的文件夹\n\n答案在于源路径必须是绝对路径，这样运行代码的时候也不会出错\n\n## 指定 pytorch 运行显卡\n\n~~~python\n \timport os\n\tos.environ[\"CUDA_VISIBLE_DEVICES\"] = \"0,1\"\n    \n    /////\n    model_text = torch.nn.DataParallel(model_text,device_ids=[0,1]).cuda()\n    \n    \n    CUDA_VISIBLE_DEVICES=1 python test.py\n~~~\n\n## 错误 RuntimeError: CUDA error: CUBLAS_STATUS_EXECUTION_FAILED when calling `cublasGemmStridedBatchedExFix\n\n先检查 机器 cuda 版本，然后就安装对应的版本\n\npip install torch==1.7.0+cu101 torchvision==0.8.1+cu101 torchaudio===0.7.0 -f https://download.pytorch.org/whl/torch_stable.html\n\nLoad key \"/home/cike/.ssh/id_rsa\": bad permissions\n\n## 分卷打包\n\n~~~bash\ntar -cvzf - 文件夹 | split -b 2048m -d - 文件名.tar.gz \n#分卷压缩proc目录，并保持每个压缩包的大小不超过2G字节。命令执行后，会生成 test.tar.gz00、test.tar.gz01等文件\n\ncat k400_rawframes_t.tar.gz* | tar zx\n~~~\n\ntar -cvzf - \"/home/cike/datasets/k400/rawframes_val/\" | split -b 2048m -d - k400_rawframes_val.tar.gz \n\n~~~bash\n#!\ntar -cvzf - \"$1\" | split -b 2048m -d - \"$2\".tar.gz \n~~~\n\n\n\n## id_rsa 权限问题\n\nchmod 755 ~/.ssh/  \nchmod 600 ~/.ssh/id_rsa ~/.ssh/id_rsa.pub   \nchmod 644 ~/.ssh/known_hosts  \n\n\n\n","source":"_posts/服务器杂记.md","raw":"---\ntitle: 服务器杂记\ndate: 2022-04-05 16:40:39\ntags: ubuntu\ndescription: 接触到的一些问题\n---\n\n# 服务器杂记\n\n## 安装jdk\n\nyum search java | grep jdk\n\nyum install 其中一个\n\n## scp 命令传递文件\n\nscp 源 root@ip:路径\n\n~~~bash\n# -r 文件夹\n# -P 对方的端口\nscp -P 2023 -r \"/home/cike/projects/python_utils/\" cike@222.201.134.237:/home/cike/projects\n\nscp -P 2023 \"/home/cike/projects/ActionCLIP/exp/clip_ucf/ViT-B/16/ucf101/20220426_092526/model_best.pt\" cike@222.201.134.237:/home/cike/\n~~~\n\nnohup scp -P 2023 -r \"/home/cike/datasets/k400/rawframes_train/\" cike@222.201.134.237:/home/cike/datasets/k400_val_raw &\n\n## 安装 anaconda\n\n```bash\nwget https://repo.anaconda.com/archive/Anaconda3-2021.11-Linux-x86_64.sh\nbash Anaconda3-2021.11-Linux-x86_64.sh\nvi ~/.bashrc #编辑环境变量\n# 添加 export PATH=\"/home/Sweeneys/anaconda3/bin:$PATH\"\nsource ~/.bashrc #刷新环境变量\n```\n\n## 使用 vscode 连接服务器\n\n```bash\nssh-keygen #生成密钥\n```\n\n我之前用腾讯的服务器，已经生成过一次了，一对密钥可以给多个服务器使用。\n\n密钥对的文件名称为 id_rsa 和 id_rsa.pub，应该分别是私钥和公钥\n\n将 公钥 id_rsa.pub 放到服务器中的 ~/.ssh 文件夹中，然后\n\n```bash\ncat id_rsa.pub >> authorized_keys\n```\n\n即可。\n\n![](服务器杂记/2022-04-05-16-38-14-image.png)\n\n点击齿轮，选择配置文件，可以将配置文件放在 D盘中，然后编辑配置文件即可。\n\n![](服务器杂记/2022-04-05-16-38-21-image.png)\n\n## wandb未登录？\n\n成功解决：wandb.errors.UsageError: api_key not configured (no-tty). call wandb.login(key=[your_api_key])\n\n方法：输入 python, \n\n```\nimport wandb\nwandb.login()\n输入密钥\n退出重新运行代码就行了\n```\n\n## github 一直 clone 不下来\n\ngnutls_handshake() failed: The TLS connection was non-properly terminated\n\n```bash\ngit config --global https.https://github.com.proxy # \ngit config --global http.https://github.com.proxy \n# 或者配置成本机自带的代理\ngit config --global http.https://127.0.0.1:10809 \n```\n\n取消配置\n\n```bash\ngit config --global --unset http.proxy\ngit config --global --unset https.proxy\n```\n\n查看 配置\n\n```bash\ngit config --global http.proxy\n```\n\ngit 配置\n\n```bash\ngit config --global user.email \"[xuning446@gmail.com](mailto:xuning446@gmail.com)\"\ngit config --global user.name \"xuning\"\n```\n\n或者使用镜像服务：[GitHub: Where the world builds software · GitHub (fastgit.xyz)](https://hub.fastgit.xyz/)\n\n## 安装 yapf 可以让 vscode 识别python 解释器\n\n```bash\nconda install -c conda-forge yapf\n```\n\n## 将某用户加入到管理员组\n\n- vi /etc/sudoers\n- ![](服务器杂记/2022-04-05-16-38-34-image.png)\n\n## Ubuntu 换镜像源\n\n```bash\nvi /etc/apt/sources.list\n# https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/ \n# 进网站复制源\n#更换源之后记得要\nsudo apt-get update\n```\n\n## 下载 UCF101 数据集\n\n```bash\nwget https://www.crcv.ucf.edu/data/UCF101/UCF101.rar --no-check-certificate\n```\n\n## SCP 传输文件\n\n- 本地复制到远程\n  - scp -P 2043 UCF101.rar cike@202.38.247.164:/home/cike/datasets\n\n## zsh 与 conda 不兼容？\n\n```bash\nconda init zsh\n```\n\nhttps://github.com/ohmyzsh/ohmyzsh/issues/9061\n\nhttps://www.cnblogs.com/lcgbk/p/13255836.html\n\nzsh 安装教程\n\n```bash\napt install zsh\n\nchsh -s /bin/zsh\n\n# 重启后\n\nsh -c \"$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)\"\n\n# 修改主题\nvim ~/.zshrc\n# s\nsource ~/.zshrc\n```\n\n## nohup 日志相关\n\n只输出错误信息到日志文件：\n\n```bash\nnohup ./program >/dev/null 2>log & # 2是错误信息\n```\n\n什么日志都不要：\n\n```bash\nnohup ./program >/dev/null 2>&1 &\n```\n\n## 安装node\n\n```bash\nwget https://nodejs.org/dist/v16.14.2/node-v16.14.2-linux-x64.tar.xz\n\ntar -xf node-v16.14.2-linux-x64.tar.xz\n\n    a、切换到 root 用户\n    b、vi /etc/profile\n    c、在最下面加入\n       # node （注释作用）\n       export NODE_HOME=/usr/local/src/node-v4.2.3-linux-x86\n       export PATH=$PATH:$NODE_HOME/bin  \n       export NODE_PATH=$NODE_HOME/lib/node_modules\n    d、:wq （保存并退出）\n    e、source /etc/profile （使配置文件生效）\n```\n\nvue 项目中 命令 npm run build 生成的 dist 下的文件可以直接使用 live server 打开，而且可以部署到GitHub pages 上。（应该仅限于静态网页）\n\n## -bash: /bin/mv: Argument list too long的解决方案\n\n在linux服务器移动文件的时候，我们一般是 mv 源文件  目标目录，如\n\n[.....]# mv ../blog/* .\n\n-bash: /bin/mv: Argument list too long\n\n\n\n上面mv的时候会报参数过长，解决方案如下：\n\nfind source file_path -type f -name '*. jpg' -exec mv {} target_path \\;\n\n示例：\n\n~~~bash\nfind ../blog/ -type f -name '*.html' -exec mv {} . \\;\n\nfind train/ -name '*.*' -exec mv {} /home/cike/projects/mmaction/data/kinetics400/videos_train \\；\n\nfind val/ -name '*.*' -exec mv {} /home/cike/projects/mmaction/data/kinetics400/videos_val \\；\n~~~\n\n## detox 命令\n\n The detox utility renames files to make them easier to work with.  It removes spaces and\n     other such annoyances.  It'll also translate or cleanup Latin-1 (ISO 8859-1) characters\n     encoded in 8-bit ASCII, Unicode characters encoded in UTF-8, and CGI escaped characters.\n\n## 如何在 VScode 或者winscp中显示符号链接的文件夹\n\n答案在于源路径必须是绝对路径，这样运行代码的时候也不会出错\n\n## 指定 pytorch 运行显卡\n\n~~~python\n \timport os\n\tos.environ[\"CUDA_VISIBLE_DEVICES\"] = \"0,1\"\n    \n    /////\n    model_text = torch.nn.DataParallel(model_text,device_ids=[0,1]).cuda()\n    \n    \n    CUDA_VISIBLE_DEVICES=1 python test.py\n~~~\n\n## 错误 RuntimeError: CUDA error: CUBLAS_STATUS_EXECUTION_FAILED when calling `cublasGemmStridedBatchedExFix\n\n先检查 机器 cuda 版本，然后就安装对应的版本\n\npip install torch==1.7.0+cu101 torchvision==0.8.1+cu101 torchaudio===0.7.0 -f https://download.pytorch.org/whl/torch_stable.html\n\nLoad key \"/home/cike/.ssh/id_rsa\": bad permissions\n\n## 分卷打包\n\n~~~bash\ntar -cvzf - 文件夹 | split -b 2048m -d - 文件名.tar.gz \n#分卷压缩proc目录，并保持每个压缩包的大小不超过2G字节。命令执行后，会生成 test.tar.gz00、test.tar.gz01等文件\n\ncat k400_rawframes_t.tar.gz* | tar zx\n~~~\n\ntar -cvzf - \"/home/cike/datasets/k400/rawframes_val/\" | split -b 2048m -d - k400_rawframes_val.tar.gz \n\n~~~bash\n#!\ntar -cvzf - \"$1\" | split -b 2048m -d - \"$2\".tar.gz \n~~~\n\n\n\n## id_rsa 权限问题\n\nchmod 755 ~/.ssh/  \nchmod 600 ~/.ssh/id_rsa ~/.ssh/id_rsa.pub   \nchmod 644 ~/.ssh/known_hosts  \n\n\n\n","slug":"服务器杂记","published":1,"updated":"2022-04-28T02:51:10.986Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5tlovxj0008ewvk2stb9f1l","content":"<h1 id=\"服务器杂记\"><a href=\"#服务器杂记\" class=\"headerlink\" title=\"服务器杂记\"></a>服务器杂记</h1><h2 id=\"安装jdk\"><a href=\"#安装jdk\" class=\"headerlink\" title=\"安装jdk\"></a>安装jdk</h2><p>yum search java | grep jdk</p>\n<p>yum install 其中一个</p>\n<h2 id=\"scp-命令传递文件\"><a href=\"#scp-命令传递文件\" class=\"headerlink\" title=\"scp 命令传递文件\"></a>scp 命令传递文件</h2><p>scp 源 root@ip:路径</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -r 文件夹</span></span><br><span class=\"line\"><span class=\"comment\"># -P 对方的端口</span></span><br><span class=\"line\">scp -P 2023 -r <span class=\"string\">&quot;/home/cike/projects/python_utils/&quot;</span> cike@222.201.134.237:/home/cike/projects</span><br><span class=\"line\"></span><br><span class=\"line\">scp -P 2023 <span class=\"string\">&quot;/home/cike/projects/ActionCLIP/exp/clip_ucf/ViT-B/16/ucf101/20220426_092526/model_best.pt&quot;</span> cike@222.201.134.237:/home/cike/</span><br></pre></td></tr></table></figure>\n\n<p>nohup scp -P 2023 -r “/home/cike/datasets/k400/rawframes_train/“ <a href=\"mailto:&#x63;&#105;&#x6b;&#x65;&#64;&#x32;&#50;&#50;&#x2e;&#50;&#x30;&#x31;&#46;&#x31;&#x33;&#52;&#46;&#x32;&#51;&#55;\">&#x63;&#105;&#x6b;&#x65;&#64;&#x32;&#50;&#50;&#x2e;&#50;&#x30;&#x31;&#46;&#x31;&#x33;&#52;&#46;&#x32;&#51;&#55;</a>:/home/cike/datasets/k400_val_raw &amp;</p>\n<h2 id=\"安装-anaconda\"><a href=\"#安装-anaconda\" class=\"headerlink\" title=\"安装 anaconda\"></a>安装 anaconda</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://repo.anaconda.com/archive/Anaconda3-2021.11-Linux-x86_64.sh</span><br><span class=\"line\">bash Anaconda3-2021.11-Linux-x86_64.sh</span><br><span class=\"line\">vi ~/.bashrc <span class=\"comment\">#编辑环境变量</span></span><br><span class=\"line\"><span class=\"comment\"># 添加 export PATH=&quot;/home/Sweeneys/anaconda3/bin:$PATH&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.bashrc <span class=\"comment\">#刷新环境变量</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用-vscode-连接服务器\"><a href=\"#使用-vscode-连接服务器\" class=\"headerlink\" title=\"使用 vscode 连接服务器\"></a>使用 vscode 连接服务器</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen <span class=\"comment\">#生成密钥</span></span><br></pre></td></tr></table></figure>\n\n<p>我之前用腾讯的服务器，已经生成过一次了，一对密钥可以给多个服务器使用。</p>\n<p>密钥对的文件名称为 id_rsa 和 id_rsa.pub，应该分别是私钥和公钥</p>\n<p>将 公钥 id_rsa.pub 放到服务器中的 ~/.ssh 文件夹中，然后</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> id_rsa.pub &gt;&gt; authorized_keys</span><br></pre></td></tr></table></figure>\n\n<p>即可。</p>\n<p><img src=\"/2022/04/05/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9D%82%E8%AE%B0/2022-04-05-16-38-14-image.png\"></p>\n<p>点击齿轮，选择配置文件，可以将配置文件放在 D盘中，然后编辑配置文件即可。</p>\n<p><img src=\"/2022/04/05/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9D%82%E8%AE%B0/2022-04-05-16-38-21-image.png\"></p>\n<h2 id=\"wandb未登录？\"><a href=\"#wandb未登录？\" class=\"headerlink\" title=\"wandb未登录？\"></a>wandb未登录？</h2><p>成功解决：wandb.errors.UsageError: api_key not configured (no-tty). call wandb.login(key=[your_api_key])</p>\n<p>方法：输入 python, </p>\n<figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> wandb</span><br><span class=\"line\"><span class=\"title\">wandb</span>.login()</span><br><span class=\"line\">输入密钥</span><br><span class=\"line\">退出重新运行代码就行了</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"github-一直-clone-不下来\"><a href=\"#github-一直-clone-不下来\" class=\"headerlink\" title=\"github 一直 clone 不下来\"></a>github 一直 clone 不下来</h2><p>gnutls_handshake() failed: The TLS connection was non-properly terminated</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global https.https://github.com.proxy <span class=\"comment\"># </span></span><br><span class=\"line\">git config --global http.https://github.com.proxy </span><br><span class=\"line\"><span class=\"comment\"># 或者配置成本机自带的代理</span></span><br><span class=\"line\">git config --global http.https://127.0.0.1:10809 </span><br></pre></td></tr></table></figure>\n\n<p>取消配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> https.proxy</span><br></pre></td></tr></table></figure>\n\n<p>查看 配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy</span><br></pre></td></tr></table></figure>\n\n<p>git 配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.email <span class=\"string\">&quot;[xuning446@gmail.com](mailto:xuning446@gmail.com)&quot;</span></span><br><span class=\"line\">git config --global user.name <span class=\"string\">&quot;xuning&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>或者使用镜像服务：<a href=\"https://hub.fastgit.xyz/\">GitHub: Where the world builds software · GitHub (fastgit.xyz)</a></p>\n<h2 id=\"安装-yapf-可以让-vscode-识别python-解释器\"><a href=\"#安装-yapf-可以让-vscode-识别python-解释器\" class=\"headerlink\" title=\"安装 yapf 可以让 vscode 识别python 解释器\"></a>安装 yapf 可以让 vscode 识别python 解释器</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda install -c conda-forge yapf</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"将某用户加入到管理员组\"><a href=\"#将某用户加入到管理员组\" class=\"headerlink\" title=\"将某用户加入到管理员组\"></a>将某用户加入到管理员组</h2><ul>\n<li>vi /etc/sudoers</li>\n<li><img src=\"/2022/04/05/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9D%82%E8%AE%B0/2022-04-05-16-38-34-image.png\"></li>\n</ul>\n<h2 id=\"Ubuntu-换镜像源\"><a href=\"#Ubuntu-换镜像源\" class=\"headerlink\" title=\"Ubuntu 换镜像源\"></a>Ubuntu 换镜像源</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/apt/sources.list</span><br><span class=\"line\"><span class=\"comment\"># https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/ </span></span><br><span class=\"line\"><span class=\"comment\"># 进网站复制源</span></span><br><span class=\"line\"><span class=\"comment\">#更换源之后记得要</span></span><br><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"下载-UCF101-数据集\"><a href=\"#下载-UCF101-数据集\" class=\"headerlink\" title=\"下载 UCF101 数据集\"></a>下载 UCF101 数据集</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://www.crcv.ucf.edu/data/UCF101/UCF101.rar --no-check-certificate</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SCP-传输文件\"><a href=\"#SCP-传输文件\" class=\"headerlink\" title=\"SCP 传输文件\"></a>SCP 传输文件</h2><ul>\n<li>本地复制到远程<ul>\n<li>scp -P 2043 UCF101.rar <a href=\"mailto:&#x63;&#x69;&#x6b;&#x65;&#x40;&#x32;&#x30;&#50;&#x2e;&#x33;&#x38;&#x2e;&#50;&#52;&#55;&#x2e;&#49;&#54;&#52;\">&#x63;&#x69;&#x6b;&#x65;&#x40;&#x32;&#x30;&#50;&#x2e;&#x33;&#x38;&#x2e;&#50;&#52;&#55;&#x2e;&#49;&#54;&#52;</a>:/home/cike/datasets</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"zsh-与-conda-不兼容？\"><a href=\"#zsh-与-conda-不兼容？\" class=\"headerlink\" title=\"zsh 与 conda 不兼容？\"></a>zsh 与 conda 不兼容？</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda init zsh</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://github.com/ohmyzsh/ohmyzsh/issues/9061\">https://github.com/ohmyzsh/ohmyzsh/issues/9061</a></p>\n<p><a href=\"https://www.cnblogs.com/lcgbk/p/13255836.html\">https://www.cnblogs.com/lcgbk/p/13255836.html</a></p>\n<p>zsh 安装教程</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install zsh</span><br><span class=\"line\"></span><br><span class=\"line\">chsh -s /bin/zsh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启后</span></span><br><span class=\"line\"></span><br><span class=\"line\">sh -c <span class=\"string\">&quot;<span class=\"subst\">$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改主题</span></span><br><span class=\"line\">vim ~/.zshrc</span><br><span class=\"line\"><span class=\"comment\"># s</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"nohup-日志相关\"><a href=\"#nohup-日志相关\" class=\"headerlink\" title=\"nohup 日志相关\"></a>nohup 日志相关</h2><p>只输出错误信息到日志文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">nohup</span> ./program &gt;/dev/null 2&gt;<span class=\"built_in\">log</span> &amp; <span class=\"comment\"># 2是错误信息</span></span><br></pre></td></tr></table></figure>\n\n<p>什么日志都不要：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">nohup</span> ./program &gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装node\"><a href=\"#安装node\" class=\"headerlink\" title=\"安装node\"></a>安装node</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://nodejs.org/dist/v16.14.2/node-v16.14.2-linux-x64.tar.xz</span><br><span class=\"line\"></span><br><span class=\"line\">tar -xf node-v16.14.2-linux-x64.tar.xz</span><br><span class=\"line\"></span><br><span class=\"line\">    a、切换到 root 用户</span><br><span class=\"line\">    b、vi /etc/profile</span><br><span class=\"line\">    c、在最下面加入</span><br><span class=\"line\">       <span class=\"comment\"># node （注释作用）</span></span><br><span class=\"line\">       <span class=\"built_in\">export</span> NODE_HOME=/usr/local/src/node-v4.2.3-linux-x86</span><br><span class=\"line\">       <span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$NODE_HOME</span>/bin  </span><br><span class=\"line\">       <span class=\"built_in\">export</span> NODE_PATH=<span class=\"variable\">$NODE_HOME</span>/lib/node_modules</span><br><span class=\"line\">    d、:wq （保存并退出）</span><br><span class=\"line\">    e、<span class=\"built_in\">source</span> /etc/profile （使配置文件生效）</span><br></pre></td></tr></table></figure>\n\n<p>vue 项目中 命令 npm run build 生成的 dist 下的文件可以直接使用 live server 打开，而且可以部署到GitHub pages 上。（应该仅限于静态网页）</p>\n<h2 id=\"bash-bin-mv-Argument-list-too-long的解决方案\"><a href=\"#bash-bin-mv-Argument-list-too-long的解决方案\" class=\"headerlink\" title=\"-bash: /bin/mv: Argument list too long的解决方案\"></a>-bash: /bin/mv: Argument list too long的解决方案</h2><p>在linux服务器移动文件的时候，我们一般是 mv 源文件  目标目录，如</p>\n<p>[…..]# mv ../blog/* .</p>\n<p>-bash: /bin/mv: Argument list too long</p>\n<p>上面mv的时候会报参数过长，解决方案如下：</p>\n<p>find source file_path -type f -name ‘*. jpg’ -exec mv {} target_path ;</p>\n<p>示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find ../blog/ -<span class=\"built_in\">type</span> f -name <span class=\"string\">&#x27;*.html&#x27;</span> -<span class=\"built_in\">exec</span> <span class=\"built_in\">mv</span> &#123;&#125; . \\;</span><br><span class=\"line\"></span><br><span class=\"line\">find train/ -name <span class=\"string\">&#x27;*.*&#x27;</span> -<span class=\"built_in\">exec</span> <span class=\"built_in\">mv</span> &#123;&#125; /home/cike/projects/mmaction/data/kinetics400/videos_train \\；</span><br><span class=\"line\"></span><br><span class=\"line\">find val/ -name <span class=\"string\">&#x27;*.*&#x27;</span> -<span class=\"built_in\">exec</span> <span class=\"built_in\">mv</span> &#123;&#125; /home/cike/projects/mmaction/data/kinetics400/videos_val \\；</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"detox-命令\"><a href=\"#detox-命令\" class=\"headerlink\" title=\"detox 命令\"></a>detox 命令</h2><p> The detox utility renames files to make them easier to work with.  It removes spaces and<br>     other such annoyances.  It’ll also translate or cleanup Latin-1 (ISO 8859-1) characters<br>     encoded in 8-bit ASCII, Unicode characters encoded in UTF-8, and CGI escaped characters.</p>\n<h2 id=\"如何在-VScode-或者winscp中显示符号链接的文件夹\"><a href=\"#如何在-VScode-或者winscp中显示符号链接的文件夹\" class=\"headerlink\" title=\"如何在 VScode 或者winscp中显示符号链接的文件夹\"></a>如何在 VScode 或者winscp中显示符号链接的文件夹</h2><p>答案在于源路径必须是绝对路径，这样运行代码的时候也不会出错</p>\n<h2 id=\"指定-pytorch-运行显卡\"><a href=\"#指定-pytorch-运行显卡\" class=\"headerlink\" title=\"指定 pytorch 运行显卡\"></a>指定 pytorch 运行显卡</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"keyword\">import</span> os</span><br><span class=\"line\">os.environ[<span class=\"string\">&quot;CUDA_VISIBLE_DEVICES&quot;</span>] = <span class=\"string\">&quot;0,1&quot;</span></span><br><span class=\"line\">   </span><br><span class=\"line\">   /////</span><br><span class=\"line\">   model_text = torch.nn.DataParallel(model_text,device_ids=[<span class=\"number\">0</span>,<span class=\"number\">1</span>]).cuda()</span><br><span class=\"line\">   </span><br><span class=\"line\">   </span><br><span class=\"line\">   CUDA_VISIBLE_DEVICES=<span class=\"number\">1</span> python test.py</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"错误-RuntimeError-CUDA-error-CUBLAS-STATUS-EXECUTION-FAILED-when-calling-cublasGemmStridedBatchedExFix\"><a href=\"#错误-RuntimeError-CUDA-error-CUBLAS-STATUS-EXECUTION-FAILED-when-calling-cublasGemmStridedBatchedExFix\" class=\"headerlink\" title=\"错误 RuntimeError: CUDA error: CUBLAS_STATUS_EXECUTION_FAILED when calling `cublasGemmStridedBatchedExFix\"></a>错误 RuntimeError: CUDA error: CUBLAS_STATUS_EXECUTION_FAILED when calling `cublasGemmStridedBatchedExFix</h2><p>先检查 机器 cuda 版本，然后就安装对应的版本</p>\n<p>pip install torch==1.7.0+cu101 torchvision==0.8.1+cu101 torchaudio===0.7.0 -f <a href=\"https://download.pytorch.org/whl/torch_stable.html\">https://download.pytorch.org/whl/torch_stable.html</a></p>\n<p>Load key “/home/cike/.ssh/id_rsa”: bad permissions</p>\n<h2 id=\"分卷打包\"><a href=\"#分卷打包\" class=\"headerlink\" title=\"分卷打包\"></a>分卷打包</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -cvzf - 文件夹 | <span class=\"built_in\">split</span> -b 2048m -d - 文件名.tar.gz </span><br><span class=\"line\"><span class=\"comment\">#分卷压缩proc目录，并保持每个压缩包的大小不超过2G字节。命令执行后，会生成 test.tar.gz00、test.tar.gz01等文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cat</span> k400_rawframes_t.tar.gz* | tar zx</span><br></pre></td></tr></table></figure>\n\n<p>tar -cvzf - “/home/cike/datasets/k400/rawframes_val/“ | split -b 2048m -d - k400_rawframes_val.tar.gz </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!</span></span><br><span class=\"line\">tar -cvzf - <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> | <span class=\"built_in\">split</span> -b 2048m -d - <span class=\"string\">&quot;<span class=\"variable\">$2</span>&quot;</span>.tar.gz </span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"id-rsa-权限问题\"><a href=\"#id-rsa-权限问题\" class=\"headerlink\" title=\"id_rsa 权限问题\"></a>id_rsa 权限问题</h2><p>chmod 755 ~/.ssh/<br>chmod 600 ~/.ssh/id_rsa ~/.ssh/id_rsa.pub<br>chmod 644 ~/.ssh/known_hosts  </p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"服务器杂记\"><a href=\"#服务器杂记\" class=\"headerlink\" title=\"服务器杂记\"></a>服务器杂记</h1><h2 id=\"安装jdk\"><a href=\"#安装jdk\" class=\"headerlink\" title=\"安装jdk\"></a>安装jdk</h2><p>yum search java | grep jdk</p>\n<p>yum install 其中一个</p>\n<h2 id=\"scp-命令传递文件\"><a href=\"#scp-命令传递文件\" class=\"headerlink\" title=\"scp 命令传递文件\"></a>scp 命令传递文件</h2><p>scp 源 root@ip:路径</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -r 文件夹</span></span><br><span class=\"line\"><span class=\"comment\"># -P 对方的端口</span></span><br><span class=\"line\">scp -P 2023 -r <span class=\"string\">&quot;/home/cike/projects/python_utils/&quot;</span> cike@222.201.134.237:/home/cike/projects</span><br><span class=\"line\"></span><br><span class=\"line\">scp -P 2023 <span class=\"string\">&quot;/home/cike/projects/ActionCLIP/exp/clip_ucf/ViT-B/16/ucf101/20220426_092526/model_best.pt&quot;</span> cike@222.201.134.237:/home/cike/</span><br></pre></td></tr></table></figure>\n\n<p>nohup scp -P 2023 -r “/home/cike/datasets/k400/rawframes_train/“ <a href=\"mailto:&#x63;&#105;&#x6b;&#x65;&#64;&#x32;&#50;&#50;&#x2e;&#50;&#x30;&#x31;&#46;&#x31;&#x33;&#52;&#46;&#x32;&#51;&#55;\">&#x63;&#105;&#x6b;&#x65;&#64;&#x32;&#50;&#50;&#x2e;&#50;&#x30;&#x31;&#46;&#x31;&#x33;&#52;&#46;&#x32;&#51;&#55;</a>:/home/cike/datasets/k400_val_raw &amp;</p>\n<h2 id=\"安装-anaconda\"><a href=\"#安装-anaconda\" class=\"headerlink\" title=\"安装 anaconda\"></a>安装 anaconda</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://repo.anaconda.com/archive/Anaconda3-2021.11-Linux-x86_64.sh</span><br><span class=\"line\">bash Anaconda3-2021.11-Linux-x86_64.sh</span><br><span class=\"line\">vi ~/.bashrc <span class=\"comment\">#编辑环境变量</span></span><br><span class=\"line\"><span class=\"comment\"># 添加 export PATH=&quot;/home/Sweeneys/anaconda3/bin:$PATH&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.bashrc <span class=\"comment\">#刷新环境变量</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用-vscode-连接服务器\"><a href=\"#使用-vscode-连接服务器\" class=\"headerlink\" title=\"使用 vscode 连接服务器\"></a>使用 vscode 连接服务器</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen <span class=\"comment\">#生成密钥</span></span><br></pre></td></tr></table></figure>\n\n<p>我之前用腾讯的服务器，已经生成过一次了，一对密钥可以给多个服务器使用。</p>\n<p>密钥对的文件名称为 id_rsa 和 id_rsa.pub，应该分别是私钥和公钥</p>\n<p>将 公钥 id_rsa.pub 放到服务器中的 ~/.ssh 文件夹中，然后</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> id_rsa.pub &gt;&gt; authorized_keys</span><br></pre></td></tr></table></figure>\n\n<p>即可。</p>\n<p><img src=\"/2022/04/05/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9D%82%E8%AE%B0/2022-04-05-16-38-14-image.png\"></p>\n<p>点击齿轮，选择配置文件，可以将配置文件放在 D盘中，然后编辑配置文件即可。</p>\n<p><img src=\"/2022/04/05/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9D%82%E8%AE%B0/2022-04-05-16-38-21-image.png\"></p>\n<h2 id=\"wandb未登录？\"><a href=\"#wandb未登录？\" class=\"headerlink\" title=\"wandb未登录？\"></a>wandb未登录？</h2><p>成功解决：wandb.errors.UsageError: api_key not configured (no-tty). call wandb.login(key=[your_api_key])</p>\n<p>方法：输入 python, </p>\n<figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> wandb</span><br><span class=\"line\"><span class=\"title\">wandb</span>.login()</span><br><span class=\"line\">输入密钥</span><br><span class=\"line\">退出重新运行代码就行了</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"github-一直-clone-不下来\"><a href=\"#github-一直-clone-不下来\" class=\"headerlink\" title=\"github 一直 clone 不下来\"></a>github 一直 clone 不下来</h2><p>gnutls_handshake() failed: The TLS connection was non-properly terminated</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global https.https://github.com.proxy <span class=\"comment\"># </span></span><br><span class=\"line\">git config --global http.https://github.com.proxy </span><br><span class=\"line\"><span class=\"comment\"># 或者配置成本机自带的代理</span></span><br><span class=\"line\">git config --global http.https://127.0.0.1:10809 </span><br></pre></td></tr></table></figure>\n\n<p>取消配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> https.proxy</span><br></pre></td></tr></table></figure>\n\n<p>查看 配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy</span><br></pre></td></tr></table></figure>\n\n<p>git 配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.email <span class=\"string\">&quot;[xuning446@gmail.com](mailto:xuning446@gmail.com)&quot;</span></span><br><span class=\"line\">git config --global user.name <span class=\"string\">&quot;xuning&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>或者使用镜像服务：<a href=\"https://hub.fastgit.xyz/\">GitHub: Where the world builds software · GitHub (fastgit.xyz)</a></p>\n<h2 id=\"安装-yapf-可以让-vscode-识别python-解释器\"><a href=\"#安装-yapf-可以让-vscode-识别python-解释器\" class=\"headerlink\" title=\"安装 yapf 可以让 vscode 识别python 解释器\"></a>安装 yapf 可以让 vscode 识别python 解释器</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda install -c conda-forge yapf</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"将某用户加入到管理员组\"><a href=\"#将某用户加入到管理员组\" class=\"headerlink\" title=\"将某用户加入到管理员组\"></a>将某用户加入到管理员组</h2><ul>\n<li>vi /etc/sudoers</li>\n<li><img src=\"/2022/04/05/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9D%82%E8%AE%B0/2022-04-05-16-38-34-image.png\"></li>\n</ul>\n<h2 id=\"Ubuntu-换镜像源\"><a href=\"#Ubuntu-换镜像源\" class=\"headerlink\" title=\"Ubuntu 换镜像源\"></a>Ubuntu 换镜像源</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/apt/sources.list</span><br><span class=\"line\"><span class=\"comment\"># https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/ </span></span><br><span class=\"line\"><span class=\"comment\"># 进网站复制源</span></span><br><span class=\"line\"><span class=\"comment\">#更换源之后记得要</span></span><br><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"下载-UCF101-数据集\"><a href=\"#下载-UCF101-数据集\" class=\"headerlink\" title=\"下载 UCF101 数据集\"></a>下载 UCF101 数据集</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://www.crcv.ucf.edu/data/UCF101/UCF101.rar --no-check-certificate</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SCP-传输文件\"><a href=\"#SCP-传输文件\" class=\"headerlink\" title=\"SCP 传输文件\"></a>SCP 传输文件</h2><ul>\n<li>本地复制到远程<ul>\n<li>scp -P 2043 UCF101.rar <a href=\"mailto:&#x63;&#x69;&#x6b;&#x65;&#x40;&#x32;&#x30;&#50;&#x2e;&#x33;&#x38;&#x2e;&#50;&#52;&#55;&#x2e;&#49;&#54;&#52;\">&#x63;&#x69;&#x6b;&#x65;&#x40;&#x32;&#x30;&#50;&#x2e;&#x33;&#x38;&#x2e;&#50;&#52;&#55;&#x2e;&#49;&#54;&#52;</a>:/home/cike/datasets</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"zsh-与-conda-不兼容？\"><a href=\"#zsh-与-conda-不兼容？\" class=\"headerlink\" title=\"zsh 与 conda 不兼容？\"></a>zsh 与 conda 不兼容？</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda init zsh</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://github.com/ohmyzsh/ohmyzsh/issues/9061\">https://github.com/ohmyzsh/ohmyzsh/issues/9061</a></p>\n<p><a href=\"https://www.cnblogs.com/lcgbk/p/13255836.html\">https://www.cnblogs.com/lcgbk/p/13255836.html</a></p>\n<p>zsh 安装教程</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install zsh</span><br><span class=\"line\"></span><br><span class=\"line\">chsh -s /bin/zsh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启后</span></span><br><span class=\"line\"></span><br><span class=\"line\">sh -c <span class=\"string\">&quot;<span class=\"subst\">$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改主题</span></span><br><span class=\"line\">vim ~/.zshrc</span><br><span class=\"line\"><span class=\"comment\"># s</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"nohup-日志相关\"><a href=\"#nohup-日志相关\" class=\"headerlink\" title=\"nohup 日志相关\"></a>nohup 日志相关</h2><p>只输出错误信息到日志文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">nohup</span> ./program &gt;/dev/null 2&gt;<span class=\"built_in\">log</span> &amp; <span class=\"comment\"># 2是错误信息</span></span><br></pre></td></tr></table></figure>\n\n<p>什么日志都不要：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">nohup</span> ./program &gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装node\"><a href=\"#安装node\" class=\"headerlink\" title=\"安装node\"></a>安装node</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://nodejs.org/dist/v16.14.2/node-v16.14.2-linux-x64.tar.xz</span><br><span class=\"line\"></span><br><span class=\"line\">tar -xf node-v16.14.2-linux-x64.tar.xz</span><br><span class=\"line\"></span><br><span class=\"line\">    a、切换到 root 用户</span><br><span class=\"line\">    b、vi /etc/profile</span><br><span class=\"line\">    c、在最下面加入</span><br><span class=\"line\">       <span class=\"comment\"># node （注释作用）</span></span><br><span class=\"line\">       <span class=\"built_in\">export</span> NODE_HOME=/usr/local/src/node-v4.2.3-linux-x86</span><br><span class=\"line\">       <span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$NODE_HOME</span>/bin  </span><br><span class=\"line\">       <span class=\"built_in\">export</span> NODE_PATH=<span class=\"variable\">$NODE_HOME</span>/lib/node_modules</span><br><span class=\"line\">    d、:wq （保存并退出）</span><br><span class=\"line\">    e、<span class=\"built_in\">source</span> /etc/profile （使配置文件生效）</span><br></pre></td></tr></table></figure>\n\n<p>vue 项目中 命令 npm run build 生成的 dist 下的文件可以直接使用 live server 打开，而且可以部署到GitHub pages 上。（应该仅限于静态网页）</p>\n<h2 id=\"bash-bin-mv-Argument-list-too-long的解决方案\"><a href=\"#bash-bin-mv-Argument-list-too-long的解决方案\" class=\"headerlink\" title=\"-bash: /bin/mv: Argument list too long的解决方案\"></a>-bash: /bin/mv: Argument list too long的解决方案</h2><p>在linux服务器移动文件的时候，我们一般是 mv 源文件  目标目录，如</p>\n<p>[…..]# mv ../blog/* .</p>\n<p>-bash: /bin/mv: Argument list too long</p>\n<p>上面mv的时候会报参数过长，解决方案如下：</p>\n<p>find source file_path -type f -name ‘*. jpg’ -exec mv {} target_path ;</p>\n<p>示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find ../blog/ -<span class=\"built_in\">type</span> f -name <span class=\"string\">&#x27;*.html&#x27;</span> -<span class=\"built_in\">exec</span> <span class=\"built_in\">mv</span> &#123;&#125; . \\;</span><br><span class=\"line\"></span><br><span class=\"line\">find train/ -name <span class=\"string\">&#x27;*.*&#x27;</span> -<span class=\"built_in\">exec</span> <span class=\"built_in\">mv</span> &#123;&#125; /home/cike/projects/mmaction/data/kinetics400/videos_train \\；</span><br><span class=\"line\"></span><br><span class=\"line\">find val/ -name <span class=\"string\">&#x27;*.*&#x27;</span> -<span class=\"built_in\">exec</span> <span class=\"built_in\">mv</span> &#123;&#125; /home/cike/projects/mmaction/data/kinetics400/videos_val \\；</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"detox-命令\"><a href=\"#detox-命令\" class=\"headerlink\" title=\"detox 命令\"></a>detox 命令</h2><p> The detox utility renames files to make them easier to work with.  It removes spaces and<br>     other such annoyances.  It’ll also translate or cleanup Latin-1 (ISO 8859-1) characters<br>     encoded in 8-bit ASCII, Unicode characters encoded in UTF-8, and CGI escaped characters.</p>\n<h2 id=\"如何在-VScode-或者winscp中显示符号链接的文件夹\"><a href=\"#如何在-VScode-或者winscp中显示符号链接的文件夹\" class=\"headerlink\" title=\"如何在 VScode 或者winscp中显示符号链接的文件夹\"></a>如何在 VScode 或者winscp中显示符号链接的文件夹</h2><p>答案在于源路径必须是绝对路径，这样运行代码的时候也不会出错</p>\n<h2 id=\"指定-pytorch-运行显卡\"><a href=\"#指定-pytorch-运行显卡\" class=\"headerlink\" title=\"指定 pytorch 运行显卡\"></a>指定 pytorch 运行显卡</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"keyword\">import</span> os</span><br><span class=\"line\">os.environ[<span class=\"string\">&quot;CUDA_VISIBLE_DEVICES&quot;</span>] = <span class=\"string\">&quot;0,1&quot;</span></span><br><span class=\"line\">   </span><br><span class=\"line\">   /////</span><br><span class=\"line\">   model_text = torch.nn.DataParallel(model_text,device_ids=[<span class=\"number\">0</span>,<span class=\"number\">1</span>]).cuda()</span><br><span class=\"line\">   </span><br><span class=\"line\">   </span><br><span class=\"line\">   CUDA_VISIBLE_DEVICES=<span class=\"number\">1</span> python test.py</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"错误-RuntimeError-CUDA-error-CUBLAS-STATUS-EXECUTION-FAILED-when-calling-cublasGemmStridedBatchedExFix\"><a href=\"#错误-RuntimeError-CUDA-error-CUBLAS-STATUS-EXECUTION-FAILED-when-calling-cublasGemmStridedBatchedExFix\" class=\"headerlink\" title=\"错误 RuntimeError: CUDA error: CUBLAS_STATUS_EXECUTION_FAILED when calling `cublasGemmStridedBatchedExFix\"></a>错误 RuntimeError: CUDA error: CUBLAS_STATUS_EXECUTION_FAILED when calling `cublasGemmStridedBatchedExFix</h2><p>先检查 机器 cuda 版本，然后就安装对应的版本</p>\n<p>pip install torch==1.7.0+cu101 torchvision==0.8.1+cu101 torchaudio===0.7.0 -f <a href=\"https://download.pytorch.org/whl/torch_stable.html\">https://download.pytorch.org/whl/torch_stable.html</a></p>\n<p>Load key “/home/cike/.ssh/id_rsa”: bad permissions</p>\n<h2 id=\"分卷打包\"><a href=\"#分卷打包\" class=\"headerlink\" title=\"分卷打包\"></a>分卷打包</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -cvzf - 文件夹 | <span class=\"built_in\">split</span> -b 2048m -d - 文件名.tar.gz </span><br><span class=\"line\"><span class=\"comment\">#分卷压缩proc目录，并保持每个压缩包的大小不超过2G字节。命令执行后，会生成 test.tar.gz00、test.tar.gz01等文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cat</span> k400_rawframes_t.tar.gz* | tar zx</span><br></pre></td></tr></table></figure>\n\n<p>tar -cvzf - “/home/cike/datasets/k400/rawframes_val/“ | split -b 2048m -d - k400_rawframes_val.tar.gz </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!</span></span><br><span class=\"line\">tar -cvzf - <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> | <span class=\"built_in\">split</span> -b 2048m -d - <span class=\"string\">&quot;<span class=\"variable\">$2</span>&quot;</span>.tar.gz </span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"id-rsa-权限问题\"><a href=\"#id-rsa-权限问题\" class=\"headerlink\" title=\"id_rsa 权限问题\"></a>id_rsa 权限问题</h2><p>chmod 755 ~/.ssh/<br>chmod 600 ~/.ssh/id_rsa ~/.ssh/id_rsa.pub<br>chmod 644 ~/.ssh/known_hosts  </p>\n"},{"title":"第一篇博客","date":"2022-04-05T02:26:57.000Z","_content":"\n运行 hexo 时发现错误：\nCannot find module 'hexo' from 'D:\\Documents\\GitHub\\myBlog'\n\n原来是因为 git 回滚到最初版时没有执行\n\n```bash\nnpm install\n```\n\n命令\n\ne社被罚两万，删除中国所有内容\n","source":"_posts/第一个博客.md","raw":"---\ntitle: 第一篇博客\ndate: 2022-04-05 10:26:57\ntags: \ncategories:  \n---\n\n运行 hexo 时发现错误：\nCannot find module 'hexo' from 'D:\\Documents\\GitHub\\myBlog'\n\n原来是因为 git 回滚到最初版时没有执行\n\n```bash\nnpm install\n```\n\n命令\n\ne社被罚两万，删除中国所有内容\n","slug":"第一个博客","published":1,"updated":"2022-06-06T07:55:13.707Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5tlovxl000bewvkcgl6hapr","content":"<p>运行 hexo 时发现错误：<br>Cannot find module ‘hexo’ from ‘D:\\Documents\\GitHub\\myBlog’</p>\n<p>原来是因为 git 回滚到最初版时没有执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n\n<p>命令</p>\n<p>e社被罚两万，删除中国所有内容</p>\n","site":{"data":{}},"excerpt":"","more":"<p>运行 hexo 时发现错误：<br>Cannot find module ‘hexo’ from ‘D:\\Documents\\GitHub\\myBlog’</p>\n<p>原来是因为 git 回滚到最初版时没有执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n\n<p>命令</p>\n<p>e社被罚两万，删除中国所有内容</p>\n"},{"title":"论文的一些知识点","date":"2022-04-08T07:26:07.000Z","mathjax":true,"description":"阅读论文时碰到的一些知识点","_content":"\n## 激活函数\n\n在人工神经网络中，一个节点的激活函数定义了该节点在给定的输入或输入集合下的输出。标准的计算机芯片电路可以看作是根据输入得到开（1）或关（0）输出的数字电路激活函数。\n\n![img](论文的一些知识点/798b-hqhtuak1849533.png)\n\n### ReLU激活函数\n\n在深度神经网络中，通常使用一种叫**修正线性单元(Rectified linear unit，ReLU）**作为神经元的激活函数。ReLU起源于神经科学的研究：2001年，Dayan、Abott从生物学角度模拟出了脑神经元接受信号更精确的激活模型，如下图：\n\n![fig1](论文的一些知识点/format,png.png)\n\n其中横轴是时间(ms)，纵轴是神经元的放电速率(Firing Rate)。生物学家推测和证明了神经元工作具有稀疏性和分布性。（稀疏性指大脑中同时被激活的神经元只有 1% ~ 4%)\n\nReLU 激活函数的形式：\n\n![fig2](论文的一些知识点/20200917181354293.png)\n\n从上图不难看出，ReLU函数其实是分段线性函数，把所有的负值都变为0，而正值不变，这种操作被成为**单侧抑制**。可别小看这个简单的操作，正因为有了这单侧抑制，才使得神经网络中的神经元也具有了稀疏激活性。尤其体现在深度神经网络模型(如CNN)中，**当模型增加N层之后，理论上ReLU神经元的激活率将降低2的N次方倍**。\n\n与之类似，当训练一个深度分类模型的时候，和目标相关的特征往往也就那么几个，因此通过ReLU实现稀疏后的模型能够更好地挖掘相关特征，拟合训练数据。\n\n那么问题来了：这种稀疏性有何作用？换句话说，我们为什么需要让神经元稀疏？当训练一个深度分类模型的时候，和目标相关的特征往往也就那么几个，因此**通过ReLU实现稀疏后的模型能够更好地挖掘相关特征，拟合训练数据**。\n\n此外，相比于其它激活函数来说，ReLU有以下优势：**对于线性函数而言，ReLU的表达能力更强**，尤其体现在深度网络中；而对于非线性函数而言，ReLU由于非负区间的梯度为常数，因此不存在梯度消失问题(Vanishing Gradient Problem)，使得模型的收敛速度维持在一个稳定状态。这里稍微描述一下什么是**梯度消失问题**：当梯度小于1时，预测值与真实值之间的误差每传播一层会衰减一次，如果在深层模型中使用sigmoid作为激活函数，这种现象尤为明显，将导致模型收敛停滞不前。\n\n参考链接：\n\n[深度学习领域最常用的10个激活函数，一文详解数学原理及优缺点](https://finance.sina.com.cn/tech/2021-02-24/doc-ikftssap8455930.shtml#:~:text=%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0%EF%BC%88Activation%20Function%EF%BC%89%E6%98%AF,%E8%BE%93%E5%85%A5%E9%9B%86%E5%90%88%E4%B8%8B%E7%9A%84%E8%BE%93%E5%87%BA%E3%80%82)\n\n[ReLU激活函数：简单之美](https://blog.csdn.net/cherrylvlei/article/details/53149381)\n\n## 神经网络中的 BN 操作\n\nBN的存在，主要起因于数据分布的问题。所谓数据分布，分为两种情况，一种在输入时数据分布不一样，称之为Covariate Shift，比如训练的数据和测试的数据本身分布就不一样，那么训练后的模型就很难泛化到测试集上。另一种分布不一样是指在输入数据经过网络内部计算后，分布发生了变化，使数据分布变得不稳定，从而导致网络寻找最优解的过程变得缓慢，训练速度会下降，这种称之为内部协方差偏移（Internal Covariate Shift）。\n\n  内部协方差偏移为什么会影响网络训练：训练深度网络时，神经网络隐层参数更新会导致网络输出层输出数据的分布（相对于输入数据分布）发生变化，而且随着层数的增加，根据链式规则，这种偏移现象会逐渐被放大。这对于网络参数学习来说是个问题：因为神经网络本质学习的就是数据分布（representation learning），如果数据分布变化了，神经网络又需要学习新的分布。\n\n  **BN层的作用是对一个batch内的所有样本进行标准化，将不规范的样本分布变换为正态分布。**处理后的样本数据分布于激活函数的敏感区域（梯度值较大的区域），因此在反向传播时能够加快误差的传播，加速网络训练。\n\n![](论文的一些知识点/image-20220408161702659.png)\n\n假设输入图像大小为$[ N , C , H , W ] $\n\nBN：将一个batch内的样本（$N$ 个样本），按照$N, H, W$三个维度进行标准化，也就是说，在每个通道上将所有的 $N$ 个样本的进行标准化操作。在batch较小时效果不好；\n\n[神经网络中的BN操作（常见正则化处理）](https://blog.csdn.net/qq_37489147/article/details/115705918)\n\n## 语义分割、实例分割\n\n- 目标检测：![image.png](论文的一些知识点/home.phpmod=attachment&filename=image.png&id=702099)\n\n- 语义分割（semantic segmentation）：简而言之就是对一张图片上的所有像素点进行分类，即对图像中的每个像素都划分出对应的类别，实现像素级别的分类。（左下即语义分割）\n\n  ![](论文的一些知识点/home.phpmod=attachment&filename=image.png&id=702090)\n\n- 实例分割(Instance segmentation)：实例分割不但要进行像素级别的分类，还需在具体的类别基础上区别开不同的实例。实例分割（图3右）其实就是目标检测和语义分割的结合。\n\n  ![](论文的一些知识点/home.phpmod=attachment&filename=image.png&id=702089)-\n\n- 全景分割(Panoramic segmentation)\n\n  全景分割是语义分割和实例分割的结合。跟实例分割不同的是：实例分割只对图像中的object进行检测，并对检测到的object进行分割，而全景分割是对图中的所有物体包括背景都要进行检测和分割。\n\n  ![](论文的一些知识点/home.phpmod=attachment&filename=image.png&id=702104)\n\n## CNN\n\n### Receptive filed(感受野)\n\n![](论文的一些知识点/v2-04b23d86bf5b53a552f3b18e46d3f980_720w.jpg)\n\n一个输入大小为 11×11的A， 经过一个过滤器大小为 3×3，步长为 1 的卷积核卷积之后，得到一个大为9×9的特征映射。可以看到在 B 中一个 3×3 的区域，在 A 中的感受视野为 5×5。B 经过一个大小为 3×3 ，步长为 1 的卷积核卷积之后，得到一个 7×7 的特征映射。因此在 B 中的一个 1×1 的区域在 A 中的视野就为 3×3。因此，C 中一个 1×1 的区域在 A 的视野就为 5×5。\n\n计算公式为： <img src=\"论文的一些知识点/image-20220409152113601.png\" alt=\"image-20220409152113601\" style=\"zoom:80%;\" />\n\n其中  $r_i$ 表示第 i 层输入的一个区域，  $s_i$ 表示第 i 层的步长，  $k_i$表示第 i 层卷积核的大小（filter size）。此计算不需要考虑 padding size。\n\n[CNN：接受视野（Receptive Field）](https://zhuanlan.zhihu.com/p/41955458)\n\n### padding size：\n\n前面可以发现，输入图像与卷积核进行卷积后的结果中损失了部分值（为什么？），输入图像的边缘被“修剪”掉了（边缘处只检测了部分像素点，丢失了图片边界处的众多信息）。这是因为边缘上的像素永远不会位于卷积核中心，而卷积核也没法扩展到边缘区域以外。\n\n这个结果我们是不能接受的，有时我们还希望输入和输出的大小应该保持一致。为解决这个问题，可以在进行卷积操作前，对原矩阵进行边界填充（Padding），也就是在矩阵的边界上填充一些值，以增加矩阵的大小，通常都用“”来进行填充的。\n\n![](论文的一些知识点/v2-2a2307d5c20551f1a3e8458c7070cf16_b.webp)\n\n[CNN基础知识——卷积（Convolution）、填充（Padding）、步长(Stride)](https://zhuanlan.zhihu.com/p/77471866)\n\n## 待补充\n\n叉积、点积、余弦相似性、马氏距离\n\nNon-maximum suppression（ 非极大值抑制）\n\n随机森林、k折交叉验证\n\n预训练模型：预训练模型就是一些人用某个较大的数据集训练好的模型\n\nbackbone：作用是对一个图像提取特征，后面的分类是自己设计的网络操作。\n\n梯度消失、梯度爆炸\n\nIoU 阈值：\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/论文的一些知识点.md","raw":"---\ntitle: 论文的一些知识点\ndate: 2022-04-08 15:26:07\ntags: 深度学习\nmathjax: true\ndescription: 阅读论文时碰到的一些知识点\n---\n\n## 激活函数\n\n在人工神经网络中，一个节点的激活函数定义了该节点在给定的输入或输入集合下的输出。标准的计算机芯片电路可以看作是根据输入得到开（1）或关（0）输出的数字电路激活函数。\n\n![img](论文的一些知识点/798b-hqhtuak1849533.png)\n\n### ReLU激活函数\n\n在深度神经网络中，通常使用一种叫**修正线性单元(Rectified linear unit，ReLU）**作为神经元的激活函数。ReLU起源于神经科学的研究：2001年，Dayan、Abott从生物学角度模拟出了脑神经元接受信号更精确的激活模型，如下图：\n\n![fig1](论文的一些知识点/format,png.png)\n\n其中横轴是时间(ms)，纵轴是神经元的放电速率(Firing Rate)。生物学家推测和证明了神经元工作具有稀疏性和分布性。（稀疏性指大脑中同时被激活的神经元只有 1% ~ 4%)\n\nReLU 激活函数的形式：\n\n![fig2](论文的一些知识点/20200917181354293.png)\n\n从上图不难看出，ReLU函数其实是分段线性函数，把所有的负值都变为0，而正值不变，这种操作被成为**单侧抑制**。可别小看这个简单的操作，正因为有了这单侧抑制，才使得神经网络中的神经元也具有了稀疏激活性。尤其体现在深度神经网络模型(如CNN)中，**当模型增加N层之后，理论上ReLU神经元的激活率将降低2的N次方倍**。\n\n与之类似，当训练一个深度分类模型的时候，和目标相关的特征往往也就那么几个，因此通过ReLU实现稀疏后的模型能够更好地挖掘相关特征，拟合训练数据。\n\n那么问题来了：这种稀疏性有何作用？换句话说，我们为什么需要让神经元稀疏？当训练一个深度分类模型的时候，和目标相关的特征往往也就那么几个，因此**通过ReLU实现稀疏后的模型能够更好地挖掘相关特征，拟合训练数据**。\n\n此外，相比于其它激活函数来说，ReLU有以下优势：**对于线性函数而言，ReLU的表达能力更强**，尤其体现在深度网络中；而对于非线性函数而言，ReLU由于非负区间的梯度为常数，因此不存在梯度消失问题(Vanishing Gradient Problem)，使得模型的收敛速度维持在一个稳定状态。这里稍微描述一下什么是**梯度消失问题**：当梯度小于1时，预测值与真实值之间的误差每传播一层会衰减一次，如果在深层模型中使用sigmoid作为激活函数，这种现象尤为明显，将导致模型收敛停滞不前。\n\n参考链接：\n\n[深度学习领域最常用的10个激活函数，一文详解数学原理及优缺点](https://finance.sina.com.cn/tech/2021-02-24/doc-ikftssap8455930.shtml#:~:text=%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0%EF%BC%88Activation%20Function%EF%BC%89%E6%98%AF,%E8%BE%93%E5%85%A5%E9%9B%86%E5%90%88%E4%B8%8B%E7%9A%84%E8%BE%93%E5%87%BA%E3%80%82)\n\n[ReLU激活函数：简单之美](https://blog.csdn.net/cherrylvlei/article/details/53149381)\n\n## 神经网络中的 BN 操作\n\nBN的存在，主要起因于数据分布的问题。所谓数据分布，分为两种情况，一种在输入时数据分布不一样，称之为Covariate Shift，比如训练的数据和测试的数据本身分布就不一样，那么训练后的模型就很难泛化到测试集上。另一种分布不一样是指在输入数据经过网络内部计算后，分布发生了变化，使数据分布变得不稳定，从而导致网络寻找最优解的过程变得缓慢，训练速度会下降，这种称之为内部协方差偏移（Internal Covariate Shift）。\n\n  内部协方差偏移为什么会影响网络训练：训练深度网络时，神经网络隐层参数更新会导致网络输出层输出数据的分布（相对于输入数据分布）发生变化，而且随着层数的增加，根据链式规则，这种偏移现象会逐渐被放大。这对于网络参数学习来说是个问题：因为神经网络本质学习的就是数据分布（representation learning），如果数据分布变化了，神经网络又需要学习新的分布。\n\n  **BN层的作用是对一个batch内的所有样本进行标准化，将不规范的样本分布变换为正态分布。**处理后的样本数据分布于激活函数的敏感区域（梯度值较大的区域），因此在反向传播时能够加快误差的传播，加速网络训练。\n\n![](论文的一些知识点/image-20220408161702659.png)\n\n假设输入图像大小为$[ N , C , H , W ] $\n\nBN：将一个batch内的样本（$N$ 个样本），按照$N, H, W$三个维度进行标准化，也就是说，在每个通道上将所有的 $N$ 个样本的进行标准化操作。在batch较小时效果不好；\n\n[神经网络中的BN操作（常见正则化处理）](https://blog.csdn.net/qq_37489147/article/details/115705918)\n\n## 语义分割、实例分割\n\n- 目标检测：![image.png](论文的一些知识点/home.phpmod=attachment&filename=image.png&id=702099)\n\n- 语义分割（semantic segmentation）：简而言之就是对一张图片上的所有像素点进行分类，即对图像中的每个像素都划分出对应的类别，实现像素级别的分类。（左下即语义分割）\n\n  ![](论文的一些知识点/home.phpmod=attachment&filename=image.png&id=702090)\n\n- 实例分割(Instance segmentation)：实例分割不但要进行像素级别的分类，还需在具体的类别基础上区别开不同的实例。实例分割（图3右）其实就是目标检测和语义分割的结合。\n\n  ![](论文的一些知识点/home.phpmod=attachment&filename=image.png&id=702089)-\n\n- 全景分割(Panoramic segmentation)\n\n  全景分割是语义分割和实例分割的结合。跟实例分割不同的是：实例分割只对图像中的object进行检测，并对检测到的object进行分割，而全景分割是对图中的所有物体包括背景都要进行检测和分割。\n\n  ![](论文的一些知识点/home.phpmod=attachment&filename=image.png&id=702104)\n\n## CNN\n\n### Receptive filed(感受野)\n\n![](论文的一些知识点/v2-04b23d86bf5b53a552f3b18e46d3f980_720w.jpg)\n\n一个输入大小为 11×11的A， 经过一个过滤器大小为 3×3，步长为 1 的卷积核卷积之后，得到一个大为9×9的特征映射。可以看到在 B 中一个 3×3 的区域，在 A 中的感受视野为 5×5。B 经过一个大小为 3×3 ，步长为 1 的卷积核卷积之后，得到一个 7×7 的特征映射。因此在 B 中的一个 1×1 的区域在 A 中的视野就为 3×3。因此，C 中一个 1×1 的区域在 A 的视野就为 5×5。\n\n计算公式为： <img src=\"论文的一些知识点/image-20220409152113601.png\" alt=\"image-20220409152113601\" style=\"zoom:80%;\" />\n\n其中  $r_i$ 表示第 i 层输入的一个区域，  $s_i$ 表示第 i 层的步长，  $k_i$表示第 i 层卷积核的大小（filter size）。此计算不需要考虑 padding size。\n\n[CNN：接受视野（Receptive Field）](https://zhuanlan.zhihu.com/p/41955458)\n\n### padding size：\n\n前面可以发现，输入图像与卷积核进行卷积后的结果中损失了部分值（为什么？），输入图像的边缘被“修剪”掉了（边缘处只检测了部分像素点，丢失了图片边界处的众多信息）。这是因为边缘上的像素永远不会位于卷积核中心，而卷积核也没法扩展到边缘区域以外。\n\n这个结果我们是不能接受的，有时我们还希望输入和输出的大小应该保持一致。为解决这个问题，可以在进行卷积操作前，对原矩阵进行边界填充（Padding），也就是在矩阵的边界上填充一些值，以增加矩阵的大小，通常都用“”来进行填充的。\n\n![](论文的一些知识点/v2-2a2307d5c20551f1a3e8458c7070cf16_b.webp)\n\n[CNN基础知识——卷积（Convolution）、填充（Padding）、步长(Stride)](https://zhuanlan.zhihu.com/p/77471866)\n\n## 待补充\n\n叉积、点积、余弦相似性、马氏距离\n\nNon-maximum suppression（ 非极大值抑制）\n\n随机森林、k折交叉验证\n\n预训练模型：预训练模型就是一些人用某个较大的数据集训练好的模型\n\nbackbone：作用是对一个图像提取特征，后面的分类是自己设计的网络操作。\n\n梯度消失、梯度爆炸\n\nIoU 阈值：\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"论文的一些知识点","published":1,"updated":"2022-04-17T02:54:23.217Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5tlovxr000iewvk1lirel7i","content":"<h2 id=\"激活函数\"><a href=\"#激活函数\" class=\"headerlink\" title=\"激活函数\"></a>激活函数</h2><p>在人工神经网络中，一个节点的激活函数定义了该节点在给定的输入或输入集合下的输出。标准的计算机芯片电路可以看作是根据输入得到开（1）或关（0）输出的数字电路激活函数。</p>\n<p><img src=\"/2022/04/08/%E8%AE%BA%E6%96%87%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9/798b-hqhtuak1849533.png\" alt=\"img\"></p>\n<h3 id=\"ReLU激活函数\"><a href=\"#ReLU激活函数\" class=\"headerlink\" title=\"ReLU激活函数\"></a>ReLU激活函数</h3><p>在深度神经网络中，通常使用一种叫<strong>修正线性单元(Rectified linear unit，ReLU）</strong>作为神经元的激活函数。ReLU起源于神经科学的研究：2001年，Dayan、Abott从生物学角度模拟出了脑神经元接受信号更精确的激活模型，如下图：</p>\n<p><img src=\"/2022/04/08/%E8%AE%BA%E6%96%87%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9/format,png.png\" alt=\"fig1\"></p>\n<p>其中横轴是时间(ms)，纵轴是神经元的放电速率(Firing Rate)。生物学家推测和证明了神经元工作具有稀疏性和分布性。（稀疏性指大脑中同时被激活的神经元只有 1% ~ 4%)</p>\n<p>ReLU 激活函数的形式：</p>\n<p><img src=\"/2022/04/08/%E8%AE%BA%E6%96%87%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9/20200917181354293.png\" alt=\"fig2\"></p>\n<p>从上图不难看出，ReLU函数其实是分段线性函数，把所有的负值都变为0，而正值不变，这种操作被成为<strong>单侧抑制</strong>。可别小看这个简单的操作，正因为有了这单侧抑制，才使得神经网络中的神经元也具有了稀疏激活性。尤其体现在深度神经网络模型(如CNN)中，<strong>当模型增加N层之后，理论上ReLU神经元的激活率将降低2的N次方倍</strong>。</p>\n<p>与之类似，当训练一个深度分类模型的时候，和目标相关的特征往往也就那么几个，因此通过ReLU实现稀疏后的模型能够更好地挖掘相关特征，拟合训练数据。</p>\n<p>那么问题来了：这种稀疏性有何作用？换句话说，我们为什么需要让神经元稀疏？当训练一个深度分类模型的时候，和目标相关的特征往往也就那么几个，因此<strong>通过ReLU实现稀疏后的模型能够更好地挖掘相关特征，拟合训练数据</strong>。</p>\n<p>此外，相比于其它激活函数来说，ReLU有以下优势：<strong>对于线性函数而言，ReLU的表达能力更强</strong>，尤其体现在深度网络中；而对于非线性函数而言，ReLU由于非负区间的梯度为常数，因此不存在梯度消失问题(Vanishing Gradient Problem)，使得模型的收敛速度维持在一个稳定状态。这里稍微描述一下什么是<strong>梯度消失问题</strong>：当梯度小于1时，预测值与真实值之间的误差每传播一层会衰减一次，如果在深层模型中使用sigmoid作为激活函数，这种现象尤为明显，将导致模型收敛停滞不前。</p>\n<p>参考链接：</p>\n<p><a href=\"https://finance.sina.com.cn/tech/2021-02-24/doc-ikftssap8455930.shtml#:~:text=%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0%EF%BC%88Activation%20Function%EF%BC%89%E6%98%AF,%E8%BE%93%E5%85%A5%E9%9B%86%E5%90%88%E4%B8%8B%E7%9A%84%E8%BE%93%E5%87%BA%E3%80%82\">深度学习领域最常用的10个激活函数，一文详解数学原理及优缺点</a></p>\n<p><a href=\"https://blog.csdn.net/cherrylvlei/article/details/53149381\">ReLU激活函数：简单之美</a></p>\n<h2 id=\"神经网络中的-BN-操作\"><a href=\"#神经网络中的-BN-操作\" class=\"headerlink\" title=\"神经网络中的 BN 操作\"></a>神经网络中的 BN 操作</h2><p>BN的存在，主要起因于数据分布的问题。所谓数据分布，分为两种情况，一种在输入时数据分布不一样，称之为Covariate Shift，比如训练的数据和测试的数据本身分布就不一样，那么训练后的模型就很难泛化到测试集上。另一种分布不一样是指在输入数据经过网络内部计算后，分布发生了变化，使数据分布变得不稳定，从而导致网络寻找最优解的过程变得缓慢，训练速度会下降，这种称之为内部协方差偏移（Internal Covariate Shift）。</p>\n<p>  内部协方差偏移为什么会影响网络训练：训练深度网络时，神经网络隐层参数更新会导致网络输出层输出数据的分布（相对于输入数据分布）发生变化，而且随着层数的增加，根据链式规则，这种偏移现象会逐渐被放大。这对于网络参数学习来说是个问题：因为神经网络本质学习的就是数据分布（representation learning），如果数据分布变化了，神经网络又需要学习新的分布。</p>\n<p>  <strong>BN层的作用是对一个batch内的所有样本进行标准化，将不规范的样本分布变换为正态分布。</strong>处理后的样本数据分布于激活函数的敏感区域（梯度值较大的区域），因此在反向传播时能够加快误差的传播，加速网络训练。</p>\n<p><img src=\"/2022/04/08/%E8%AE%BA%E6%96%87%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220408161702659.png\"></p>\n<p>假设输入图像大小为$[ N , C , H , W ] $</p>\n<p>BN：将一个batch内的样本（$N$ 个样本），按照$N, H, W$三个维度进行标准化，也就是说，在每个通道上将所有的 $N$ 个样本的进行标准化操作。在batch较小时效果不好；</p>\n<p><a href=\"https://blog.csdn.net/qq_37489147/article/details/115705918\">神经网络中的BN操作（常见正则化处理）</a></p>\n<h2 id=\"语义分割、实例分割\"><a href=\"#语义分割、实例分割\" class=\"headerlink\" title=\"语义分割、实例分割\"></a>语义分割、实例分割</h2><ul>\n<li><p>目标检测：<img src=\"/2022/04/08/%E8%AE%BA%E6%96%87%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9/home.phpmod=attachment&filename=image.png&id=702099\" alt=\"image.png\"></p>\n</li>\n<li><p>语义分割（semantic segmentation）：简而言之就是对一张图片上的所有像素点进行分类，即对图像中的每个像素都划分出对应的类别，实现像素级别的分类。（左下即语义分割）</p>\n<p><img src=\"/2022/04/08/%E8%AE%BA%E6%96%87%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9/home.phpmod=attachment&filename=image.png&id=702090\"></p>\n</li>\n<li><p>实例分割(Instance segmentation)：实例分割不但要进行像素级别的分类，还需在具体的类别基础上区别开不同的实例。实例分割（图3右）其实就是目标检测和语义分割的结合。</p>\n<p><img src=\"/2022/04/08/%E8%AE%BA%E6%96%87%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9/home.phpmod=attachment&filename=image.png&id=702089\">-</p>\n</li>\n<li><p>全景分割(Panoramic segmentation)</p>\n<p>全景分割是语义分割和实例分割的结合。跟实例分割不同的是：实例分割只对图像中的object进行检测，并对检测到的object进行分割，而全景分割是对图中的所有物体包括背景都要进行检测和分割。</p>\n<p><img src=\"/2022/04/08/%E8%AE%BA%E6%96%87%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9/home.phpmod=attachment&filename=image.png&id=702104\"></p>\n</li>\n</ul>\n<h2 id=\"CNN\"><a href=\"#CNN\" class=\"headerlink\" title=\"CNN\"></a>CNN</h2><h3 id=\"Receptive-filed-感受野\"><a href=\"#Receptive-filed-感受野\" class=\"headerlink\" title=\"Receptive filed(感受野)\"></a>Receptive filed(感受野)</h3><p><img src=\"/2022/04/08/%E8%AE%BA%E6%96%87%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9/v2-04b23d86bf5b53a552f3b18e46d3f980_720w.jpg\"></p>\n<p>一个输入大小为 11×11的A， 经过一个过滤器大小为 3×3，步长为 1 的卷积核卷积之后，得到一个大为9×9的特征映射。可以看到在 B 中一个 3×3 的区域，在 A 中的感受视野为 5×5。B 经过一个大小为 3×3 ，步长为 1 的卷积核卷积之后，得到一个 7×7 的特征映射。因此在 B 中的一个 1×1 的区域在 A 中的视野就为 3×3。因此，C 中一个 1×1 的区域在 A 的视野就为 5×5。</p>\n<p>计算公式为： <img src=\"/2022/04/08/%E8%AE%BA%E6%96%87%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220409152113601.png\" alt=\"image-20220409152113601\" style=\"zoom:80%;\"></p>\n<p>其中  $r_i$ 表示第 i 层输入的一个区域，  $s_i$ 表示第 i 层的步长，  $k_i$表示第 i 层卷积核的大小（filter size）。此计算不需要考虑 padding size。</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/41955458\">CNN：接受视野（Receptive Field）</a></p>\n<h3 id=\"padding-size：\"><a href=\"#padding-size：\" class=\"headerlink\" title=\"padding size：\"></a>padding size：</h3><p>前面可以发现，输入图像与卷积核进行卷积后的结果中损失了部分值（为什么？），输入图像的边缘被“修剪”掉了（边缘处只检测了部分像素点，丢失了图片边界处的众多信息）。这是因为边缘上的像素永远不会位于卷积核中心，而卷积核也没法扩展到边缘区域以外。</p>\n<p>这个结果我们是不能接受的，有时我们还希望输入和输出的大小应该保持一致。为解决这个问题，可以在进行卷积操作前，对原矩阵进行边界填充（Padding），也就是在矩阵的边界上填充一些值，以增加矩阵的大小，通常都用“”来进行填充的。</p>\n<p><img src=\"/2022/04/08/%E8%AE%BA%E6%96%87%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9/v2-2a2307d5c20551f1a3e8458c7070cf16_b.webp\"></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/77471866\">CNN基础知识——卷积（Convolution）、填充（Padding）、步长(Stride)</a></p>\n<h2 id=\"待补充\"><a href=\"#待补充\" class=\"headerlink\" title=\"待补充\"></a>待补充</h2><p>叉积、点积、余弦相似性、马氏距离</p>\n<p>Non-maximum suppression（ 非极大值抑制）</p>\n<p>随机森林、k折交叉验证</p>\n<p>预训练模型：预训练模型就是一些人用某个较大的数据集训练好的模型</p>\n<p>backbone：作用是对一个图像提取特征，后面的分类是自己设计的网络操作。</p>\n<p>梯度消失、梯度爆炸</p>\n<p>IoU 阈值：</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"激活函数\"><a href=\"#激活函数\" class=\"headerlink\" title=\"激活函数\"></a>激活函数</h2><p>在人工神经网络中，一个节点的激活函数定义了该节点在给定的输入或输入集合下的输出。标准的计算机芯片电路可以看作是根据输入得到开（1）或关（0）输出的数字电路激活函数。</p>\n<p><img src=\"/2022/04/08/%E8%AE%BA%E6%96%87%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9/798b-hqhtuak1849533.png\" alt=\"img\"></p>\n<h3 id=\"ReLU激活函数\"><a href=\"#ReLU激活函数\" class=\"headerlink\" title=\"ReLU激活函数\"></a>ReLU激活函数</h3><p>在深度神经网络中，通常使用一种叫<strong>修正线性单元(Rectified linear unit，ReLU）</strong>作为神经元的激活函数。ReLU起源于神经科学的研究：2001年，Dayan、Abott从生物学角度模拟出了脑神经元接受信号更精确的激活模型，如下图：</p>\n<p><img src=\"/2022/04/08/%E8%AE%BA%E6%96%87%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9/format,png.png\" alt=\"fig1\"></p>\n<p>其中横轴是时间(ms)，纵轴是神经元的放电速率(Firing Rate)。生物学家推测和证明了神经元工作具有稀疏性和分布性。（稀疏性指大脑中同时被激活的神经元只有 1% ~ 4%)</p>\n<p>ReLU 激活函数的形式：</p>\n<p><img src=\"/2022/04/08/%E8%AE%BA%E6%96%87%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9/20200917181354293.png\" alt=\"fig2\"></p>\n<p>从上图不难看出，ReLU函数其实是分段线性函数，把所有的负值都变为0，而正值不变，这种操作被成为<strong>单侧抑制</strong>。可别小看这个简单的操作，正因为有了这单侧抑制，才使得神经网络中的神经元也具有了稀疏激活性。尤其体现在深度神经网络模型(如CNN)中，<strong>当模型增加N层之后，理论上ReLU神经元的激活率将降低2的N次方倍</strong>。</p>\n<p>与之类似，当训练一个深度分类模型的时候，和目标相关的特征往往也就那么几个，因此通过ReLU实现稀疏后的模型能够更好地挖掘相关特征，拟合训练数据。</p>\n<p>那么问题来了：这种稀疏性有何作用？换句话说，我们为什么需要让神经元稀疏？当训练一个深度分类模型的时候，和目标相关的特征往往也就那么几个，因此<strong>通过ReLU实现稀疏后的模型能够更好地挖掘相关特征，拟合训练数据</strong>。</p>\n<p>此外，相比于其它激活函数来说，ReLU有以下优势：<strong>对于线性函数而言，ReLU的表达能力更强</strong>，尤其体现在深度网络中；而对于非线性函数而言，ReLU由于非负区间的梯度为常数，因此不存在梯度消失问题(Vanishing Gradient Problem)，使得模型的收敛速度维持在一个稳定状态。这里稍微描述一下什么是<strong>梯度消失问题</strong>：当梯度小于1时，预测值与真实值之间的误差每传播一层会衰减一次，如果在深层模型中使用sigmoid作为激活函数，这种现象尤为明显，将导致模型收敛停滞不前。</p>\n<p>参考链接：</p>\n<p><a href=\"https://finance.sina.com.cn/tech/2021-02-24/doc-ikftssap8455930.shtml#:~:text=%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0%EF%BC%88Activation%20Function%EF%BC%89%E6%98%AF,%E8%BE%93%E5%85%A5%E9%9B%86%E5%90%88%E4%B8%8B%E7%9A%84%E8%BE%93%E5%87%BA%E3%80%82\">深度学习领域最常用的10个激活函数，一文详解数学原理及优缺点</a></p>\n<p><a href=\"https://blog.csdn.net/cherrylvlei/article/details/53149381\">ReLU激活函数：简单之美</a></p>\n<h2 id=\"神经网络中的-BN-操作\"><a href=\"#神经网络中的-BN-操作\" class=\"headerlink\" title=\"神经网络中的 BN 操作\"></a>神经网络中的 BN 操作</h2><p>BN的存在，主要起因于数据分布的问题。所谓数据分布，分为两种情况，一种在输入时数据分布不一样，称之为Covariate Shift，比如训练的数据和测试的数据本身分布就不一样，那么训练后的模型就很难泛化到测试集上。另一种分布不一样是指在输入数据经过网络内部计算后，分布发生了变化，使数据分布变得不稳定，从而导致网络寻找最优解的过程变得缓慢，训练速度会下降，这种称之为内部协方差偏移（Internal Covariate Shift）。</p>\n<p>  内部协方差偏移为什么会影响网络训练：训练深度网络时，神经网络隐层参数更新会导致网络输出层输出数据的分布（相对于输入数据分布）发生变化，而且随着层数的增加，根据链式规则，这种偏移现象会逐渐被放大。这对于网络参数学习来说是个问题：因为神经网络本质学习的就是数据分布（representation learning），如果数据分布变化了，神经网络又需要学习新的分布。</p>\n<p>  <strong>BN层的作用是对一个batch内的所有样本进行标准化，将不规范的样本分布变换为正态分布。</strong>处理后的样本数据分布于激活函数的敏感区域（梯度值较大的区域），因此在反向传播时能够加快误差的传播，加速网络训练。</p>\n<p><img src=\"/2022/04/08/%E8%AE%BA%E6%96%87%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220408161702659.png\"></p>\n<p>假设输入图像大小为$[ N , C , H , W ] $</p>\n<p>BN：将一个batch内的样本（$N$ 个样本），按照$N, H, W$三个维度进行标准化，也就是说，在每个通道上将所有的 $N$ 个样本的进行标准化操作。在batch较小时效果不好；</p>\n<p><a href=\"https://blog.csdn.net/qq_37489147/article/details/115705918\">神经网络中的BN操作（常见正则化处理）</a></p>\n<h2 id=\"语义分割、实例分割\"><a href=\"#语义分割、实例分割\" class=\"headerlink\" title=\"语义分割、实例分割\"></a>语义分割、实例分割</h2><ul>\n<li><p>目标检测：<img src=\"/2022/04/08/%E8%AE%BA%E6%96%87%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9/home.phpmod=attachment&filename=image.png&id=702099\" alt=\"image.png\"></p>\n</li>\n<li><p>语义分割（semantic segmentation）：简而言之就是对一张图片上的所有像素点进行分类，即对图像中的每个像素都划分出对应的类别，实现像素级别的分类。（左下即语义分割）</p>\n<p><img src=\"/2022/04/08/%E8%AE%BA%E6%96%87%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9/home.phpmod=attachment&filename=image.png&id=702090\"></p>\n</li>\n<li><p>实例分割(Instance segmentation)：实例分割不但要进行像素级别的分类，还需在具体的类别基础上区别开不同的实例。实例分割（图3右）其实就是目标检测和语义分割的结合。</p>\n<p><img src=\"/2022/04/08/%E8%AE%BA%E6%96%87%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9/home.phpmod=attachment&filename=image.png&id=702089\">-</p>\n</li>\n<li><p>全景分割(Panoramic segmentation)</p>\n<p>全景分割是语义分割和实例分割的结合。跟实例分割不同的是：实例分割只对图像中的object进行检测，并对检测到的object进行分割，而全景分割是对图中的所有物体包括背景都要进行检测和分割。</p>\n<p><img src=\"/2022/04/08/%E8%AE%BA%E6%96%87%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9/home.phpmod=attachment&filename=image.png&id=702104\"></p>\n</li>\n</ul>\n<h2 id=\"CNN\"><a href=\"#CNN\" class=\"headerlink\" title=\"CNN\"></a>CNN</h2><h3 id=\"Receptive-filed-感受野\"><a href=\"#Receptive-filed-感受野\" class=\"headerlink\" title=\"Receptive filed(感受野)\"></a>Receptive filed(感受野)</h3><p><img src=\"/2022/04/08/%E8%AE%BA%E6%96%87%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9/v2-04b23d86bf5b53a552f3b18e46d3f980_720w.jpg\"></p>\n<p>一个输入大小为 11×11的A， 经过一个过滤器大小为 3×3，步长为 1 的卷积核卷积之后，得到一个大为9×9的特征映射。可以看到在 B 中一个 3×3 的区域，在 A 中的感受视野为 5×5。B 经过一个大小为 3×3 ，步长为 1 的卷积核卷积之后，得到一个 7×7 的特征映射。因此在 B 中的一个 1×1 的区域在 A 中的视野就为 3×3。因此，C 中一个 1×1 的区域在 A 的视野就为 5×5。</p>\n<p>计算公式为： <img src=\"/2022/04/08/%E8%AE%BA%E6%96%87%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220409152113601.png\" alt=\"image-20220409152113601\" style=\"zoom:80%;\"></p>\n<p>其中  $r_i$ 表示第 i 层输入的一个区域，  $s_i$ 表示第 i 层的步长，  $k_i$表示第 i 层卷积核的大小（filter size）。此计算不需要考虑 padding size。</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/41955458\">CNN：接受视野（Receptive Field）</a></p>\n<h3 id=\"padding-size：\"><a href=\"#padding-size：\" class=\"headerlink\" title=\"padding size：\"></a>padding size：</h3><p>前面可以发现，输入图像与卷积核进行卷积后的结果中损失了部分值（为什么？），输入图像的边缘被“修剪”掉了（边缘处只检测了部分像素点，丢失了图片边界处的众多信息）。这是因为边缘上的像素永远不会位于卷积核中心，而卷积核也没法扩展到边缘区域以外。</p>\n<p>这个结果我们是不能接受的，有时我们还希望输入和输出的大小应该保持一致。为解决这个问题，可以在进行卷积操作前，对原矩阵进行边界填充（Padding），也就是在矩阵的边界上填充一些值，以增加矩阵的大小，通常都用“”来进行填充的。</p>\n<p><img src=\"/2022/04/08/%E8%AE%BA%E6%96%87%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9/v2-2a2307d5c20551f1a3e8458c7070cf16_b.webp\"></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/77471866\">CNN基础知识——卷积（Convolution）、填充（Padding）、步长(Stride)</a></p>\n<h2 id=\"待补充\"><a href=\"#待补充\" class=\"headerlink\" title=\"待补充\"></a>待补充</h2><p>叉积、点积、余弦相似性、马氏距离</p>\n<p>Non-maximum suppression（ 非极大值抑制）</p>\n<p>随机森林、k折交叉验证</p>\n<p>预训练模型：预训练模型就是一些人用某个较大的数据集训练好的模型</p>\n<p>backbone：作用是对一个图像提取特征，后面的分类是自己设计的网络操作。</p>\n<p>梯度消失、梯度爆炸</p>\n<p>IoU 阈值：</p>\n"}],"PostAsset":[{"_id":"source/_posts/hexo插入图片/2022-04-05-16-35-35-image.png","post":"cl5tlovxc0003ewvk3ea049zw","slug":"2022-04-05-16-35-35-image.png","modified":1,"renderable":1},{"_id":"source/_posts/hexo插入图片/image-20220405160330232.png","post":"cl5tlovxc0003ewvk3ea049zw","slug":"image-20220405160330232.png","modified":1,"renderable":1},{"_id":"source/_posts/word 狗都不用/image-20220417173230383.png","post":"cl5tlovxi0007ewvk4qgh7qsx","slug":"image-20220417173230383.png","modified":1,"renderable":1},{"_id":"source/_posts/服务器杂记/2022-04-05-16-38-14-image.png","post":"cl5tlovxj0008ewvk2stb9f1l","slug":"2022-04-05-16-38-14-image.png","modified":1,"renderable":1},{"_id":"source/_posts/服务器杂记/2022-04-05-16-38-21-image.png","post":"cl5tlovxj0008ewvk2stb9f1l","slug":"2022-04-05-16-38-21-image.png","modified":1,"renderable":1},{"_id":"source/_posts/服务器杂记/2022-04-05-16-38-34-image.png","post":"cl5tlovxj0008ewvk2stb9f1l","slug":"2022-04-05-16-38-34-image.png","modified":1,"renderable":1},{"_id":"source/_posts/论文的一些知识点/20200917181354293.png","post":"cl5tlovxr000iewvk1lirel7i","slug":"20200917181354293.png","modified":1,"renderable":1},{"_id":"source/_posts/论文的一些知识点/798b-hqhtuak1849533.png","post":"cl5tlovxr000iewvk1lirel7i","slug":"798b-hqhtuak1849533.png","modified":1,"renderable":1},{"_id":"source/_posts/论文的一些知识点/format,png.png","post":"cl5tlovxr000iewvk1lirel7i","slug":"format,png.png","modified":1,"renderable":1},{"_id":"source/_posts/论文的一些知识点/home.phpmod=attachment&filename=image.png&id=702089","post":"cl5tlovxr000iewvk1lirel7i","slug":"home.phpmod=attachment&filename=image.png&id=702089","modified":1,"renderable":1},{"_id":"source/_posts/论文的一些知识点/home.phpmod=attachment&filename=image.png&id=702090","post":"cl5tlovxr000iewvk1lirel7i","slug":"home.phpmod=attachment&filename=image.png&id=702090","modified":1,"renderable":1},{"_id":"source/_posts/论文的一些知识点/home.phpmod=attachment&filename=image.png&id=702099","post":"cl5tlovxr000iewvk1lirel7i","slug":"home.phpmod=attachment&filename=image.png&id=702099","modified":1,"renderable":1},{"_id":"source/_posts/论文的一些知识点/home.phpmod=attachment&filename=image.png&id=702104","post":"cl5tlovxr000iewvk1lirel7i","slug":"home.phpmod=attachment&filename=image.png&id=702104","modified":1,"renderable":1},{"_id":"source/_posts/论文的一些知识点/image-20220408161702659.png","post":"cl5tlovxr000iewvk1lirel7i","slug":"image-20220408161702659.png","modified":1,"renderable":1},{"_id":"source/_posts/论文的一些知识点/image-20220409152113601.png","post":"cl5tlovxr000iewvk1lirel7i","slug":"image-20220409152113601.png","modified":1,"renderable":1},{"_id":"source/_posts/论文的一些知识点/v2-04b23d86bf5b53a552f3b18e46d3f980_720w.jpg","post":"cl5tlovxr000iewvk1lirel7i","slug":"v2-04b23d86bf5b53a552f3b18e46d3f980_720w.jpg","modified":1,"renderable":1},{"_id":"source/_posts/论文的一些知识点/v2-2a2307d5c20551f1a3e8458c7070cf16_b.webp","post":"cl5tlovxr000iewvk1lirel7i","slug":"v2-2a2307d5c20551f1a3e8458c7070cf16_b.webp","modified":1,"renderable":1}],"PostCategory":[],"PostTag":[{"post_id":"cl5tlovx80001ewvk1vw70w30","tag_id":"cl5tlovxf0004ewvkerwy2cl1","_id":"cl5tlovxl000aewvk5y8n1lrh"},{"post_id":"cl5tlovxj0008ewvk2stb9f1l","tag_id":"cl5tlovxf0004ewvkerwy2cl1","_id":"cl5tlovxm000cewvk11rxd545"},{"post_id":"cl5tlovxc0003ewvk3ea049zw","tag_id":"cl5tlovxk0009ewvkcdaagcok","_id":"cl5tlovxo000eewvkbnm4d51k"},{"post_id":"cl5tlovxh0006ewvk598w51or","tag_id":"cl5tlovxk0009ewvkcdaagcok","_id":"cl5tlovxp000gewvk9yg4gsts"},{"post_id":"cl5tlovxi0007ewvk4qgh7qsx","tag_id":"cl5tlovxo000fewvkct49855t","_id":"cl5tlovxp000hewvkgogwb83g"},{"post_id":"cl5tlovxr000iewvk1lirel7i","tag_id":"cl5tlovxs000jewvkdvggfy8i","_id":"cl5tlovxs000kewvk1xv46puk"}],"Tag":[{"name":"ubuntu","_id":"cl5tlovxf0004ewvkerwy2cl1"},{"name":"hexo","_id":"cl5tlovxk0009ewvkcdaagcok"},{"name":"word","_id":"cl5tlovxo000fewvkct49855t"},{"name":"深度学习","_id":"cl5tlovxs000jewvkdvggfy8i"}]}}